<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%- title %></title>
  <link rel="stylesheet" href="/css/core.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
  <link href="https://unpkg.com/tailwindcss@^2.0/dist/tailwind.min.css" rel="stylesheet">
  <link href="/css/trips.css" rel="stylesheet">
</head>
<body class="bg-gray-50">
  <%- include('../partials/nav') %>

  <div class="max-w-6xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
    <!-- Header -->
    <div class="flex items-center justify-between mb-8">
      <div>
        <h1 class="text-3xl font-bold text-gray-900">Travel Vouchers & Credits</h1>
        <p class="text-gray-600 mt-1">Manage your travel credits, gift cards, and vouchers</p>
      </div>
      <button onclick="showAddVoucherModal()" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center gap-2">
        <span class="material-symbols-outlined" style="font-size: 20px;">add</span>
        Add Voucher
      </button>
    </div>

    <!-- Flash Messages -->
    <% if (typeof success_msg !== 'undefined' && success_msg) { %>
      <div class="mb-4 p-4 bg-green-50 border border-green-200 rounded-lg text-green-800">
        <div class="flex items-center gap-3">
          <span class="material-symbols-outlined text-green-600">check_circle</span>
          <%= success_msg %>
        </div>
      </div>
    <% } %>
    <% if (typeof error_msg !== 'undefined' && error_msg) { %>
      <div class="mb-4 p-4 bg-red-50 border border-red-200 rounded-lg text-red-800">
        <div class="flex items-center gap-3">
          <span class="material-symbols-outlined text-red-600">error</span>
          <%= error_msg %>
        </div>
      </div>
    <% } %>

    <!-- Filters -->
    <div class="mb-6 flex gap-4 flex-wrap">
      <div>
        <label class="block text-sm font-medium text-gray-700 mb-2">Status</label>
        <select onchange="filterVouchers()" id="statusFilter" class="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent appearance-none bg-white">
          <option value="">All Statuses</option>
          <option value="OPEN">Open</option>
          <option value="PARTIALLY_USED">Partially Used</option>
          <option value="USED">Used</option>
          <option value="EXPIRED">Expired</option>
          <option value="TRANSFERRED">Transferred</option>
          <option value="CANCELLED">Cancelled</option>
        </select>
      </div>
      <div>
        <label class="block text-sm font-medium text-gray-700 mb-2">Type</label>
        <select onchange="filterVouchers()" id="typeFilter" class="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent appearance-none bg-white">
          <option value="">All Types</option>
          <option value="TRAVEL_CREDIT">Travel Credit</option>
          <option value="UPGRADE_CERT">Upgrade Certificate</option>
          <option value="COMPANION_CERT">Companion Certificate</option>
          <option value="GIFT_CARD">Gift Card</option>
          <option value="MISC">Miscellaneous</option>
        </select>
      </div>
    </div>

    <!-- Vouchers Table -->
    <% if (vouchers && vouchers.length > 0) { %>
      <div class="overflow-x-auto">
        <table id="vouchersTable" class="min-w-full divide-y divide-gray-200 border border-gray-200 rounded-lg shadow-xs">
          <thead class="bg-gray-50">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider cursor-pointer hover:bg-gray-100" onclick="sortTable('voucherNumber')">
                <div class="flex items-center gap-2">
                  Voucher Number
                  <span class="material-symbols-outlined text-xs sort-indicator" style="font-size: 16px; display: none;">unfold_more</span>
                </div>
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider cursor-pointer hover:bg-gray-100" onclick="sortTable('issuer')">
                <div class="flex items-center gap-2">
                  Issuer
                  <span class="material-symbols-outlined text-xs sort-indicator" style="font-size: 16px; display: none;">unfold_more</span>
                </div>
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider cursor-pointer hover:bg-gray-100" onclick="sortTable('type')">
                <div class="flex items-center gap-2">
                  Type
                  <span class="material-symbols-outlined text-xs sort-indicator" style="font-size: 16px; display: none;">unfold_more</span>
                </div>
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider cursor-pointer hover:bg-gray-100" onclick="sortTable('status')">
                <div class="flex items-center gap-2">
                  Status
                  <span class="material-symbols-outlined text-xs sort-indicator" style="font-size: 16px; display: none;">unfold_more</span>
                </div>
              </th>
              <th class="px-6 py-3 text-right text-xs font-medium text-gray-700 uppercase tracking-wider cursor-pointer hover:bg-gray-100" onclick="sortTable('totalValue')">
                <div class="flex items-center justify-end gap-2">
                  Amount
                  <span class="material-symbols-outlined text-xs sort-indicator" style="font-size: 16px; display: none;">unfold_more</span>
                </div>
              </th>
              <th class="px-6 py-3 text-right text-xs font-medium text-gray-700 uppercase tracking-wider cursor-pointer hover:bg-gray-100" onclick="sortTable('usagePercent')">
                <div class="flex items-center justify-end gap-2">
                  Usage
                  <span class="material-symbols-outlined text-xs sort-indicator" style="font-size: 16px; display: none;">unfold_more</span>
                </div>
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider cursor-pointer hover:bg-gray-100" onclick="sortTable('expirationDate')">
                <div class="flex items-center gap-2">
                  Expiration
                  <span class="material-symbols-outlined text-xs sort-indicator" style="font-size: 16px; display: none;">unfold_more</span>
                </div>
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider">Actions</th>
            </tr>
          </thead>
          <tbody class="divide-y divide-gray-200">
            <% vouchers.forEach((voucher, index) => { %>
              <tr class="hover:bg-gray-50 transition-colors" data-status="<%= voucher.status %>" data-type="<%= voucher.type %>">
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900"><%= voucher.voucherNumber %></td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-600"><%= voucher.issuer %></td>
                <td class="px-6 py-4 whitespace-nowrap text-sm">
                  <span class="px-2 py-1 rounded-full text-xs font-medium bg-blue-50 text-blue-700">
                    <%= voucher.type.replace(/_/g, ' ') %>
                  </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm">
                  <span class="px-2 py-1 rounded-full text-xs font-medium
                    <% if (voucher.status === 'OPEN') { %>bg-green-100 text-green-800
                    <% } else if (voucher.status === 'PARTIALLY_USED') { %>bg-yellow-100 text-yellow-800
                    <% } else if (voucher.status === 'USED') { %>bg-blue-100 text-blue-800
                    <% } else if (voucher.status === 'EXPIRED') { %>bg-red-100 text-red-800
                    <% } else { %>bg-gray-100 text-gray-800<% } %>
                  ">
                    <%= voucher.status.replace(/_/g, ' ') %>
                  </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 text-right"><%= voucher.currency %> <%= parseFloat(voucher.totalValue).toFixed(2) %></td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-right">
                  <div class="flex items-center justify-end gap-2">
                    <span class="text-xs text-gray-600"><%= voucher.usagePercent %>%</span>
                    <div class="w-16 bg-gray-200 rounded-full h-1.5">
                      <div class="bg-blue-600 h-1.5 rounded-full" style="width: <%= voucher.usagePercent %>%"></div>
                    </div>
                  </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm
                  <% if (voucher.expirationDate) { %>
                    <% if (voucher.isExpired) { %>text-red-600 font-medium<% } else if (voucher.daysUntilExpiration <= 30) { %>text-yellow-600 font-medium<% } else { %>text-gray-600<% } %>
                  <% } else { %>text-gray-600<% } %>
                ">
                  <% if (voucher.expirationDate) { %>
                    <% const date = new Date(voucher.expirationDate); const formatted = date.toLocaleDateString('en-US', {month: 'short', day: 'numeric', year: 'numeric'}); %>
                    <%= formatted %>
                  <% } else { %>
                    No expiration
                  <% } %>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                  <div class="flex gap-2">
                    <button onclick="editVoucher('<%= voucher.id %>')" class="text-blue-600 hover:text-blue-900" title="Edit">
                      <span class="material-symbols-outlined" style="font-size: 18px;">edit</span>
                    </button>
                    <% if ((voucher.status === 'OPEN' || voucher.status === 'PARTIALLY_USED') && voucher.remainingBalance > 0) { %>
                      <button onclick="reissueRemainder('<%= voucher.id %>', '<%= voucher.remainingBalance.toFixed(2) %>')" class="text-yellow-600 hover:text-yellow-900" title="Reissue Remainder">
                        <span class="material-symbols-outlined" style="font-size: 18px;">assignment</span>
                      </button>
                    <% } %>
                    <button onclick="deleteVoucher('<%= voucher.id %>', '<%= voucher.voucherNumber %>')" class="text-red-600 hover:text-red-900" title="Delete">
                      <span class="material-symbols-outlined" style="font-size: 18px;">delete</span>
                    </button>
                  </div>
                </td>
              </tr>
            <% }); %>
          </tbody>
        </table>
      </div>
    <% } else { %>
      <div class="text-center py-12 bg-white rounded-lg border border-gray-200">
        <span class="material-symbols-outlined text-gray-400" style="font-size: 48px; display: block; margin-bottom: 1rem;">card_giftcard</span>
        <p class="text-gray-600 mb-4">No vouchers found</p>
        <button onclick="showAddVoucherModal()" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
          Add Your First Voucher
        </button>
      </div>
    <% } %>
  </div>

  <!-- Add/Edit Voucher Modal -->
  <div id="voucherModal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
    <div class="bg-white rounded-lg max-w-2xl w-full max-h-screen overflow-y-auto">
      <div class="sticky top-0 bg-white border-b border-gray-200 p-6 flex items-center justify-between">
        <h2 id="modalTitle" class="text-xl font-bold text-gray-900">Add New Voucher</h2>
        <button onclick="closeVoucherModal()" class="text-gray-400 hover:text-gray-600">
          <span class="material-symbols-outlined">close</span>
        </button>
      </div>

      <form id="voucherForm" method="POST" class="p-6 space-y-4">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Type *</label>
            <select name="type" id="voucherType" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent appearance-none bg-white">
              <option value="">Select Type</option>
              <option value="TRAVEL_CREDIT">Travel Credit</option>
              <option value="UPGRADE_CERT">Upgrade Certificate</option>
              <option value="COMPANION_CERT">Companion Certificate</option>
              <option value="GIFT_CARD">Gift Card</option>
              <option value="MISC">Miscellaneous</option>
            </select>
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Issuer *</label>
            <input type="text" name="issuer" placeholder="e.g., Delta, KLM, Starbucks" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Voucher Number *</label>
            <input type="text" name="voucherNumber" placeholder="e.g., VC-12345678" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Associated Account</label>
            <input type="text" name="associatedAccount" placeholder="e.g., Frequent Flyer #" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">PIN Code</label>
            <input type="text" name="pinCode" placeholder="Security code (if applicable)" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Currency</label>
            <input type="text" name="currency" placeholder="USD" value="USD" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Total Value *</label>
            <input type="number" name="totalValue" placeholder="500.00" step="0.01" min="0" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Expiration Date</label>
            <input type="date" name="expirationDate" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
          </div>
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Notes</label>
          <textarea name="notes" placeholder="Any additional information about this voucher" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"></textarea>
        </div>

        <div class="flex gap-3 pt-4 border-t border-gray-200">
          <button type="submit" class="flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium">
            Save Voucher
          </button>
          <button type="button" onclick="closeVoucherModal()" class="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50">
            Cancel
          </button>
        </div>
      </form>
    </div>
  </div>

  <script>
    // Table sorting state
    let sortState = {
      column: null,
      direction: 'asc' // 'asc' or 'desc'
    };

    function sortTable(column) {
      const table = document.getElementById('vouchersTable');
      const tbody = table.querySelector('tbody');
      const rows = Array.from(tbody.querySelectorAll('tr'));

      // Toggle sort direction if same column is clicked
      if (sortState.column === column) {
        sortState.direction = sortState.direction === 'asc' ? 'desc' : 'asc';
      } else {
        sortState.column = column;
        sortState.direction = 'asc';
      }

      // Clear all sort indicators
      document.querySelectorAll('.sort-indicator').forEach(indicator => {
        indicator.style.display = 'none';
      });

      // Show sort indicator for current column
      const headerCell = Array.from(table.querySelectorAll('th')).find(th => {
        const button = th.querySelector('[onclick*="' + column + '"]');
        return button;
      });
      if (headerCell) {
        headerCell.querySelector('.sort-indicator').style.display = 'inline';
        const icon = headerCell.querySelector('.sort-indicator');
        icon.textContent = sortState.direction === 'asc' ? 'arrow_upward' : 'arrow_downward';
      }

      // Sort rows
      rows.sort((a, b) => {
        let aValue, bValue;

        switch (column) {
          case 'voucherNumber':
            aValue = a.cells[0].textContent.trim();
            bValue = b.cells[0].textContent.trim();
            break;
          case 'issuer':
            aValue = a.cells[1].textContent.trim();
            bValue = b.cells[1].textContent.trim();
            break;
          case 'type':
            aValue = a.getAttribute('data-type');
            bValue = b.getAttribute('data-type');
            break;
          case 'status':
            aValue = a.getAttribute('data-status');
            bValue = b.getAttribute('data-status');
            break;
          case 'totalValue':
            aValue = parseFloat(a.cells[4].textContent.replace(/[^\d.]/g, ''));
            bValue = parseFloat(b.cells[4].textContent.replace(/[^\d.]/g, ''));
            break;
          case 'usagePercent':
            aValue = parseFloat(a.cells[5].textContent.match(/\d+/)[0]);
            bValue = parseFloat(b.cells[5].textContent.match(/\d+/)[0]);
            break;
          case 'expirationDate':
            aValue = a.cells[6].textContent.trim();
            bValue = b.cells[6].textContent.trim();
            if (aValue === 'No expiration') aValue = '99999999';
            if (bValue === 'No expiration') bValue = '99999999';
            break;
          default:
            return 0;
        }

        // Handle string comparison
        if (typeof aValue === 'string' && typeof bValue === 'string') {
          return sortState.direction === 'asc'
            ? aValue.localeCompare(bValue)
            : bValue.localeCompare(aValue);
        }

        // Handle numeric comparison
        if (sortState.direction === 'asc') {
          return aValue > bValue ? 1 : -1;
        } else {
          return aValue < bValue ? 1 : -1;
        }
      });

      // Re-append sorted rows
      rows.forEach(row => tbody.appendChild(row));
    }

    function showAddVoucherModal() {
      document.getElementById('modalTitle').textContent = 'Add New Voucher';
      document.getElementById('voucherForm').reset();
      document.getElementById('voucherForm').action = '/vouchers';
      document.getElementById('voucherForm').method = 'POST';
      document.getElementById('voucherModal').classList.remove('hidden');
    }

    function closeVoucherModal() {
      document.getElementById('voucherModal').classList.add('hidden');
    }

    function editVoucher(voucherId) {
      alert('Edit functionality coming soon');
      // TODO: Fetch voucher data and open modal
    }

    function deleteVoucher(voucherId, voucherNumber) {
      if (confirm(`Are you sure you want to delete voucher ${voucherNumber}?`)) {
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = `/vouchers/${voucherId}?_method=DELETE`;
        document.body.appendChild(form);
        form.submit();
      }
    }

    function reissueRemainder(voucherId, remainingBalance) {
      if (confirm(`Reissue ${remainingBalance} as a new voucher? The original will be marked as PARTIALLY_USED.`)) {
        fetch(`/vouchers/${voucherId}/reissue-remainder`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            alert('Voucher reissued successfully!');
            location.reload();
          } else {
            alert('Error reissuing voucher: ' + data.message);
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('Error reissuing voucher');
        });
      }
    }

    function filterVouchers() {
      const statusFilter = document.getElementById('statusFilter').value;
      const typeFilter = document.getElementById('typeFilter').value;

      document.querySelectorAll('tbody tr').forEach(row => {
        const status = row.getAttribute('data-status');
        const type = row.getAttribute('data-type');

        const matchStatus = !statusFilter || status === statusFilter;
        const matchType = !typeFilter || type === typeFilter;

        row.style.display = (matchStatus && matchType) ? '' : 'none';
      });
    }

    // Handle form submission
    document.getElementById('voucherForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(document.getElementById('voucherForm'));
      const data = {
        type: formData.get('type'),
        issuer: formData.get('issuer'),
        voucherNumber: formData.get('voucherNumber'),
        associatedAccount: formData.get('associatedAccount'),
        pinCode: formData.get('pinCode'),
        currency: formData.get('currency'),
        totalValue: formData.get('totalValue'),
        expirationDate: formData.get('expirationDate'),
        notes: formData.get('notes'),
        userId: '<%= user.id %>'
      };

      try {
        const response = await fetch('/vouchers', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(data)
        });

        const result = await response.json();

        if (result.success) {
          closeVoucherModal();
          location.reload();
        } else {
          alert('Error: ' + result.message);
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Error creating voucher');
      }
    });
  </script>
</body>
</html>
