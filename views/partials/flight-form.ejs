<!-- Flight Form - Sidebar Only - Using Preline Components -->

<%
  const isAddMode = !isEditing;
  const submitButtonText = isAddMode ? 'Add Flight' : 'Update Flight';
  const headerText = isAddMode ? 'Add Flight' : 'Edit Flight';
%>

<div class="sidebar-form-container">
  <div class="flex items-start justify-between mb-6">
    <div class="flex items-center">
      <button onclick="<%= isAddMode ? 'showAddItemMenu()' : 'closeSecondarySidebar()' %>" class="flex items-center justify-center w-8 h-8 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-lg transition-colors mr-3">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
        </svg>
      </button>
      <h2 class="text-lg font-bold text-gray-900"><%= headerText %></h2>
    </div>
    <div class="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center flex-shrink-0">
      <span class="material-symbols-outlined text-blue-600" style="font-size: 16px;">flight</span>
    </div>
  </div>

  <form id="<%= isAddMode ? 'addFlightForm' : 'editFlightForm' %>" action="<%= isAddMode ? `/flights/trips/${tripId}/flights` : `/flights/${data?.id}` %>" method="POST" class="space-y-4">
    <% if (!isAddMode) { %>
      <input type="hidden" name="_method" value="PUT">
    <% } %>
    <input type="hidden" name="tripId" value="<%= tripId %>">

    <!-- Flight Number & Airline -->
    <div class="grid grid-cols-3 gap-3">
      <div class="col-span-1">
        <label class="block text-sm font-medium text-gray-700 mb-1">Flight Number</label>
        <input type="text" name="flightNumber" id="flightNumberInput" value="<%= data?.flightNumber || '' %>" placeholder="KL668" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" autocomplete="off" autocapitalize="off" autocorrect="off" spellcheck="false" required>
      </div>
      <div class="col-span-2">
        <label class="block text-sm font-medium text-gray-700 mb-1">Airline</label>
        <input type="text" name="airline" id="flightAirlineInput" value="<%= data?.airline || '' %>" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-100" readonly required>
      </div>
    </div>

    <!-- Origin & Destination - Preline Combobox -->
    <div class="grid grid-cols-2 gap-3">
      <div>
        <label class="block text-sm font-medium text-gray-700 mb-1">Origin</label>
        <div class="relative" data-hs-combobox='{"groupingType": "default", "preventSelection": false, "isOpenOnFocus": true}'>
          <div class="relative">
            <input class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 pr-9" type="text" name="origin" id="<%= isAddMode ? 'originInput' : 'edit_flight_origin' %>" placeholder="AUS" value="<%= data?.origin || '' %>" data-hs-combobox-input autocomplete="off" autocapitalize="off" autocorrect="off" spellcheck="false" required>
            <div class="absolute right-2 top-2.5 pointer-events-none">
              <svg class="w-5 h-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <circle cx="11" cy="11" r="8"></circle>
                <path d="m21 21-4.35-4.35"></path>
              </svg>
            </div>
          </div>
          <div class="absolute z-50 w-full max-h-72 p-1 bg-white border border-gray-200 rounded-lg shadow-md hidden" data-hs-combobox-output>
            <div data-hs-combobox-output-items-wrapper>
              <div class="cursor-pointer py-2 px-4 w-full text-sm text-gray-800 hover:bg-gray-100 rounded-lg focus:outline-none focus:bg-gray-100" data-hs-combobox-output-item tabindex="0">
                <div class="flex justify-between items-center w-full">
                  <span data-hs-combobox-search-text></span>
                  <span class="hidden hs-combobox-selected:block">
                    <svg class="flex-shrink-0 w-3.5 h-3.5 text-blue-600" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <polyline points="20,6 9,17 4,12"></polyline>
                    </svg>
                  </span>
                </div>
              </div>
            </div>
          </div>
        </div>
        <input type="hidden" name="originTimezone" id="<%= isAddMode ? 'originTimezone' : 'edit_flight_originTimezone' %>" value="<%= data?.originTimezone || '' %>">
      </div>
      <div>
        <label class="block text-sm font-medium text-gray-700 mb-1">Destination</label>
        <div class="relative" data-hs-combobox='{"groupingType": "default", "preventSelection": false, "isOpenOnFocus": true}'>
          <div class="relative">
            <input class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 pr-9" type="text" name="destination" id="<%= isAddMode ? 'destinationInput' : 'edit_flight_destination' %>" placeholder="AMS" value="<%= data?.destination || '' %>" data-hs-combobox-input autocomplete="off" autocapitalize="off" autocorrect="off" spellcheck="false" required>
            <div class="absolute right-2 top-2.5 pointer-events-none">
              <svg class="w-5 h-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <circle cx="11" cy="11" r="8"></circle>
                <path d="m21 21-4.35-4.35"></path>
              </svg>
            </div>
          </div>
          <div class="absolute z-50 w-full max-h-72 p-1 bg-white border border-gray-200 rounded-lg shadow-md hidden" data-hs-combobox-output>
            <div data-hs-combobox-output-items-wrapper>
              <div class="cursor-pointer py-2 px-4 w-full text-sm text-gray-800 hover:bg-gray-100 rounded-lg focus:outline-none focus:bg-gray-100" data-hs-combobox-output-item tabindex="0">
                <div class="flex justify-between items-center w-full">
                  <span data-hs-combobox-search-text></span>
                  <span class="hidden hs-combobox-selected:block">
                    <svg class="flex-shrink-0 w-3.5 h-3.5 text-blue-600" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <polyline points="20,6 9,17 4,12"></polyline>
                    </svg>
                  </span>
                </div>
              </div>
            </div>
          </div>
        </div>
        <input type="hidden" name="destinationTimezone" id="<%= isAddMode ? 'destinationTimezone' : 'edit_flight_destinationTimezone' %>" value="<%= data?.destinationTimezone || '' %>">
      </div>
    </div>

    <!-- Departure Date & Time -->
    <div class="grid grid-cols-2 gap-3">
      <div>
        <label class="block text-sm font-medium text-gray-700 mb-1">Departure Date</label>
        <input type="date" name="departureDate" id="<%= isAddMode ? '' : 'edit_flight_departureDate' %>" value="<%= data?.departureDate || '' %>" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" required>
      </div>
      <div>
        <label class="block text-sm font-medium text-gray-700 mb-1">Departure Time</label>
        <input type="text" name="departureTime" id="<%= isAddMode ? '' : 'edit_flight_departureTime' %>" value="<%= data?.departureTime || '' %>" placeholder="HH:MM" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" required>
      </div>
    </div>

    <!-- Arrival Date & Time -->
    <div class="grid grid-cols-2 gap-3">
      <div>
        <label class="block text-sm font-medium text-gray-700 mb-1">Arrival Date</label>
        <input type="date" name="arrivalDate" id="<%= isAddMode ? '' : 'edit_flight_arrivalDate' %>" value="<%= data?.arrivalDate || '' %>" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" required>
      </div>
      <div>
        <label class="block text-sm font-medium text-gray-700 mb-1">Arrival Time</label>
        <input type="text" name="arrivalTime" id="<%= isAddMode ? '' : 'edit_flight_arrivalTime' %>" value="<%= data?.arrivalTime || '' %>" placeholder="HH:MM" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" required>
      </div>
    </div>

    <!-- PNR & Seat -->
    <div class="grid grid-cols-3 gap-3">
      <div class="col-span-2">
        <label class="block text-sm font-medium text-gray-700 mb-1">PNR</label>
        <input type="text" name="pnr" id="<%= isAddMode ? '' : 'edit_flight_pnr' %>" value="<%= data?.pnr || '' %>" placeholder="ABC123D" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
      </div>
      <div class="col-span-1">
        <label class="block text-sm font-medium text-gray-700 mb-1">Seat</label>
        <input type="text" name="seat" id="<%= isAddMode ? '' : 'edit_flight_seat' %>" value="<%= data?.seat || '' %>" placeholder="4A" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
      </div>
    </div>

    <!-- Vouchers Section (Edit Mode Only) -->
    <% if (!isAddMode && data?.id) { %>
      <%- include('./flight-vouchers-section', { flight: data, trip: { id: tripId }, isOwner: true }) %>
    <% } %>

    <!-- Buttons -->
    <div class="flex space-x-3 pt-4">
      <button type="submit" class="flex-1 <%= isAddMode ? 'bg-blue-600 hover:bg-blue-700 focus:ring-blue-500' : 'bg-green-600 hover:bg-green-700 focus:ring-green-500' %> text-white py-2 px-4 rounded-md focus:outline-none focus:ring-2 transition-colors">
        <%= submitButtonText %>
      </button>
      <button type="button" onclick="closeSecondarySidebar()" class="px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-gray-500 transition-colors">
        Cancel
      </button>
    </div>
  </form>

  <% if (!isAddMode) { %>
    <form action="/flights/<%= data?.id %>?_method=DELETE" method="POST" class="mt-4 pt-4 border-t border-gray-200">
      <input type="hidden" name="tripId" value="<%= tripId %>">
      <button type="submit" class="w-full bg-red-600 text-white py-2 px-4 rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 transition-colors" onclick="return confirm('Are you sure you want to delete this flight?')">
        Delete Flight
      </button>
    </form>
  <% } %>
</div>

<script>
// Auto-populate airline and airport based on IATA codes
const airports = <%- JSON.stringify(airports || {}) %>;

// Make airports data available globally for search
if (typeof window !== 'undefined') {
  window.flightFormAirports = airports;
}

function initializeFlightForm() {
  function updateAirline() {
    const flightNumberInput = document.querySelector('input[name="flightNumber"]');
    const airlineInput = document.getElementById('flightAirlineInput');

    if (!flightNumberInput || !airlineInput) {
      return;
    }

    const flightNumber = flightNumberInput.value.trim().toUpperCase();

    if (flightNumber.length < 1) {
      airlineInput.value = '';
      return;
    }

    // Extract first 1-3 characters as airline code
    const airlineCode = flightNumber.match(/^([A-Z0-9]{1,3})/)?.[1] || '';

    if (!airlineCode) {
      airlineInput.value = '';
      return;
    }

    // Temporarily remove readonly to allow value updates
    airlineInput.removeAttribute('readonly');

    // Use the global lookupAirline function from trip-view-utils.js
    if (typeof lookupAirline === 'function') {
      lookupAirline(flightNumber, 'flightAirlineInput');
    }

    // Re-add readonly
    airlineInput.setAttribute('readonly', 'readonly');
  }

  function formatAirportDisplay(code, airport) {
    // Format: "[AAA] City"
    return `[${code}] ${airport.city_name}`;
  }

  function extractAirportCode(value) {
    // Extract IATA code from various formats:
    // "[AAA] City", "AAA - City, Country", "AAA" => "AAA"
    const match = value.match(/\[?([A-Z]{3})\]?/);
    return match ? match[1] : null;
  }

  function updateAirportFromCode(input) {
    const value = input.value.trim();
    const code = extractAirportCode(value);

    if (!code) {
      return;
    }

    const airport = airports[code];

    if (airport) {
      const formatted = formatAirportDisplay(code, airport);
      input.value = formatted;

      // Update timezone hidden field if it exists
      if (input.name === 'origin') {
        const timezoneField = document.getElementById('originTimezone') ||
                              document.getElementById('edit_flight_originTimezone');
        if (timezoneField) {
          timezoneField.value = airport.timezone || '';
        }
      } else if (input.name === 'destination') {
        const timezoneField = document.getElementById('destinationTimezone') ||
                              document.getElementById('edit_flight_destinationTimezone');
        if (timezoneField) {
          timezoneField.value = airport.timezone || '';
        }
      }
    }
  }

  function handleOriginBlur() {
    const value = this.value.trim().toUpperCase();
    if (value.length === 3 && /^[A-Z]{3}$/.test(value)) {
      updateAirportFromCode(this);
    }
  }

  function handleDestinationBlur() {
    const value = this.value.trim().toUpperCase();
    if (value.length === 3 && /^[A-Z]{3}$/.test(value)) {
      updateAirportFromCode(this);
    }
  }

  function reformatAirportField(input) {
    // Reformat existing airport values on initial load
    if (input.value) {
      updateAirportFromCode(input);
    }
  }

  // Set up event listeners
  const flightNumberInput = document.querySelector('input[name="flightNumber"]');
  if (flightNumberInput) {
    // Remove old listeners to avoid duplicates
    flightNumberInput.removeEventListener('blur', updateAirline);
    flightNumberInput.removeEventListener('input', updateAirline);
    // Add new listeners
    flightNumberInput.addEventListener('blur', updateAirline);
    flightNumberInput.addEventListener('input', updateAirline);
  }

  const originInput = document.querySelector('input[name="origin"]');
  if (originInput) {
    originInput.removeEventListener('blur', handleOriginBlur);
    originInput.addEventListener('blur', handleOriginBlur);
    // Reformat on initial load
    reformatAirportField(originInput);
  }

  const destinationInput = document.querySelector('input[name="destination"]');
  if (destinationInput) {
    destinationInput.removeEventListener('blur', handleDestinationBlur);
    destinationInput.addEventListener('blur', handleDestinationBlur);
    // Reformat on initial load
    reformatAirportField(destinationInput);
  }
}

// Initialize immediately when script runs
initializeFlightForm();
</script>
