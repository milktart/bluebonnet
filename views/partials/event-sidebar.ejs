<div class="flex items-center justify-between mb-6">
  <h2 class="text-lg font-bold text-gray-900">Event Details</h2>
  <button onclick="closeSecondarySidebar()" class="text-gray-400 hover:text-gray-600">
    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
    </svg>
  </button>
</div>

<div class="space-y-4">
  <!-- Event Name -->
  <div>
    <h3 class="text-sm font-medium text-gray-700 mb-1">Event Name</h3>
    <p class="text-sm text-gray-900"><%= event.name %></p>
  </div>

  <!-- Date and Time -->
  <div>
    <h3 class="text-sm font-medium text-gray-700 mb-1">Date & Time</h3>
    <p class="text-sm text-gray-900"><%= dateTime %></p>
  </div>

  <!-- Location -->
  <% if (event.location) { %>
    <div>
      <h3 class="text-sm font-medium text-gray-700 mb-1">Location</h3>
      <p class="text-sm text-gray-900 whitespace-pre-wrap"><%= event.location %></p>
    </div>
  <% } %>

  <!-- URL -->
  <% if (event.eventUrl) { %>
    <div>
      <h3 class="text-sm font-medium text-gray-700 mb-1">Event URL</h3>
      <a href="<%= event.eventUrl %>" target="_blank" rel="noopener noreferrer" class="text-sm text-blue-600 hover:text-blue-800 underline"><%= event.eventUrl %></a>
    </div>
  <% } %>

  <!-- Contact Phone -->
  <% if (event.contactPhone) { %>
    <div>
      <h3 class="text-sm font-medium text-gray-700 mb-1">Contact Phone</h3>
      <p class="text-sm text-gray-900"><%= event.contactPhone %></p>
    </div>
  <% } %>

  <!-- Contact Email -->
  <% if (event.contactEmail) { %>
    <div>
      <h3 class="text-sm font-medium text-gray-700 mb-1">Contact Email</h3>
      <p class="text-sm text-gray-900"><%= event.contactEmail %></p>
    </div>
  <% } %>

  <!-- Description -->
  <% if (event.description) { %>
    <div>
      <h3 class="text-sm font-medium text-gray-700 mb-1">Description</h3>
      <p class="text-sm text-gray-900 whitespace-pre-wrap"><%= event.description %></p>
    </div>
  <% } %>

  <!-- Action Buttons -->
  <div class="flex space-x-3 pt-4 border-t border-gray-200">
    <button onclick="loadSidebarContent('/events/<%= event.id %>/edit-form')" class="flex-1 bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors text-sm font-medium">
      Edit Event
    </button>
    <button onclick="deleteEventWithNotification('<%= event.id %>', '<%= event.name %>')" class="flex-1 bg-red-600 text-white py-2 px-4 rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 transition-colors text-sm font-medium">
      Delete Event
    </button>
  </div>
</div>

<script>
function deleteEventWithNotification(eventId, eventName) {
  // Delete the event via API
  fetch('/events/' + eventId, {
    method: 'DELETE',
    headers: {
      'x-async-request': 'true'
    }
  })
    .then(response => {
      if (!response.ok) {
        throw new Error('Failed to delete event: ' + response.statusText);
      }
      return response.json();
    })
    .then(data => {
      if (data.success) {
        // Close the sidebar first
        if (typeof closeSecondarySidebar === 'function') {
          closeSecondarySidebar();
        }

        // Show delete notification with undo - this function is defined in main.js
        // It will work even if called immediately after page load
        if (typeof showDeleteNotification === 'function') {
          showDeleteNotification(eventName, 'event', eventId, '/events/' + eventId + '/restore', () => {
            // Callback when undo is pressed - reload the page
            window.location.reload();
          });

          // Reload the page after 5.5 seconds (after notification disappears)
          setTimeout(() => {
            window.location.reload();
          }, 5500);
        } else {
          console.warn('showDeleteNotification not found, using fallback');
          // Fallback: create notification inline if function not available
          createDeleteNotificationFallback(eventName, eventId);
          setTimeout(() => {
            window.location.reload();
          }, 3000);
        }
      } else {
        alert('Error deleting event: ' + (data.error || 'Unknown error'));
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert('Error deleting event: ' + error.message);
    });
}

// Fallback notification if main.js hasn't loaded yet
function createDeleteNotificationFallback(itemName, itemId) {
  let container = document.getElementById('delete-notification-container');
  if (!container) {
    container = document.createElement('div');
    container.id = 'delete-notification-container';
    container.className = 'fixed top-0 left-1/2 transform -translate-x-1/2 z-50 pt-4 px-4';
    document.body.appendChild(container);
  }

  const notification = document.createElement('div');
  notification.className = 'rounded-lg bg-red-600 text-white p-4 max-w-md shadow-lg flex items-center justify-between';
  notification.innerHTML = `
    <p class="text-sm font-medium">
      ${itemName} deleted
    </p>
    <button type="button" class="ml-4 text-white hover:text-red-100 transition-colors undo-btn">
      <u class="text-xs font-semibold">UNDO</u>
    </button>
  `;

  container.appendChild(notification);

  const undoBtn = notification.querySelector('.undo-btn');
  let undoTimeout;

  undoBtn.addEventListener('click', async () => {
    clearTimeout(undoTimeout);
    try {
      const response = await fetch('/events/' + itemId + '/restore', { method: 'POST' });
      if (response.ok) {
        notification.remove();
        const successMsg = document.createElement('div');
        successMsg.className = 'rounded-lg bg-green-600 text-white p-4 max-w-md shadow-lg';
        successMsg.innerHTML = `
          <p class="text-sm font-medium">
            ${itemName} restored
          </p>
        `;
        container.appendChild(successMsg);
        setTimeout(() => {
          successMsg.remove();
          window.location.reload();
        }, 3000);
      } else {
        alert('Failed to restore ' + itemName);
      }
    } catch (error) {
      console.error('Error restoring:', error);
      alert('Error restoring ' + itemName);
    }
  });

  // Auto-remove after 5 seconds
  undoTimeout = setTimeout(() => {
    notification.style.opacity = '0';
    notification.style.transition = 'opacity 0.3s ease-out';
    setTimeout(() => {
      notification.remove();
    }, 300);
  }, 5000);
}
</script>
