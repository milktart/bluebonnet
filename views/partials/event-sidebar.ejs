<div class="flex items-center justify-between mb-6">
  <h2 class="text-lg font-bold text-gray-900">Event Details</h2>
  <button onclick="closeSecondarySidebar()" class="text-gray-400 hover:text-gray-600">
    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
    </svg>
  </button>
</div>

<div class="space-y-4">
  <!-- Event Name -->
  <div>
    <h3 class="text-sm font-medium text-gray-700 mb-1">Event Name</h3>
    <p class="text-sm text-gray-900"><%= event.name %></p>
  </div>

  <!-- Date and Time -->
  <div>
    <h3 class="text-sm font-medium text-gray-700 mb-1">Date & Time</h3>
    <p class="text-sm text-gray-900"><%= dateTime %></p>
  </div>

  <!-- Location -->
  <% if (event.location) { %>
    <div>
      <h3 class="text-sm font-medium text-gray-700 mb-1">Location</h3>
      <p class="text-sm text-gray-900 whitespace-pre-wrap"><%= event.location %></p>
    </div>
  <% } %>

  <!-- URL -->
  <% if (event.eventUrl) { %>
    <div>
      <h3 class="text-sm font-medium text-gray-700 mb-1">Event URL</h3>
      <a href="<%= event.eventUrl %>" target="_blank" rel="noopener noreferrer" class="text-sm text-blue-600 hover:text-blue-800 underline"><%= event.eventUrl %></a>
    </div>
  <% } %>

  <!-- Contact Phone -->
  <% if (event.contactPhone) { %>
    <div>
      <h3 class="text-sm font-medium text-gray-700 mb-1">Contact Phone</h3>
      <p class="text-sm text-gray-900"><%= event.contactPhone %></p>
    </div>
  <% } %>

  <!-- Contact Email -->
  <% if (event.contactEmail) { %>
    <div>
      <h3 class="text-sm font-medium text-gray-700 mb-1">Contact Email</h3>
      <p class="text-sm text-gray-900"><%= event.contactEmail %></p>
    </div>
  <% } %>

  <!-- Description -->
  <% if (event.description) { %>
    <div>
      <h3 class="text-sm font-medium text-gray-700 mb-1">Description</h3>
      <p class="text-sm text-gray-900 whitespace-pre-wrap"><%= event.description %></p>
    </div>
  <% } %>

  <!-- Action Buttons -->
  <div class="flex space-x-3 pt-4 border-t border-gray-200">
    <button onclick="loadSidebarContent('/events/<%= event.id %>/edit-form')" class="flex-1 bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors text-sm font-medium">
      Edit Event
    </button>
    <button onclick="deleteEventWithNotification('<%= event.id %>', '<%= event.name %>')" class="flex-1 bg-red-600 text-white py-2 px-4 rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 transition-colors text-sm font-medium">
      Delete Event
    </button>
  </div>
</div>

<script>
function deleteEventWithNotification(eventId, eventName) {
  // Delete the event via API
  fetch('/events/' + eventId, {
    method: 'DELETE',
    headers: {
      'x-async-request': 'true'
    }
  })
    .then(response => {
      if (!response.ok) {
        throw new Error('Failed to delete event: ' + response.statusText);
      }
      return response.json();
    })
    .then(data => {
      if (data.success) {
        // Close the sidebar first
        if (typeof closeSecondarySidebar === 'function') {
          closeSecondarySidebar();
        }

        // Show delete notification with undo - this function is defined in main.js
        // It will work even if called immediately after page load
        if (typeof showDeleteNotification === 'function') {
          showDeleteNotification(eventName, 'event', eventId, '/events/' + eventId + '/restore', () => {
            // Callback when undo is pressed - reload the page
            window.location.reload();
          });

          // Reload the page after 5.5 seconds (after notification disappears)
          setTimeout(() => {
            window.location.reload();
          }, 5500);
        } else {
          console.warn('showDeleteNotification not found, using fallback');
          // Fallback: create notification inline if function not available
          createDeleteNotificationFallback(eventName, eventId);
          setTimeout(() => {
            window.location.reload();
          }, 3000);
        }
      } else {
        alert('Error deleting event: ' + (data.error || 'Unknown error'));
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert('Error deleting event: ' + error.message);
    });
}

// Fallback notification if main.js hasn't loaded yet
function createDeleteNotificationFallback(itemName, itemId) {
  let container = document.getElementById('delete-notification-container');
  if (!container) {
    container = document.createElement('div');
    container.id = 'delete-notification-container';
    container.className = 'fixed top-0 left-1/2 transform -translate-x-1/2 z-50 pt-4 px-4';
    document.body.appendChild(container);
  }

  const notification = document.createElement('div');
  notification.className = 'mb-4 rounded-md bg-red-50 bg-opacity-95 p-4 border border-red-200 max-w-md';
  notification.innerHTML = `
    <div class="flex">
      <div class="flex-shrink-0">
        <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
          <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.28 7.22a.75.75 0 00-1.06 1.06L8.94 10l-1.72 1.72a.75.75 0 101.06 1.06L10 11.06l1.72 1.72a.75.75 0 101.06-1.06L11.06 10l1.72-1.72a.75.75 0 00-1.06-1.06L10 8.94 8.28 7.22z" clip-rule="evenodd" />
        </svg>
      </div>
      <div class="ml-3 flex-1">
        <p class="text-sm font-medium text-red-800">
          ${itemName} has been deleted
        </p>
      </div>
      <div class="ml-auto pl-3">
        <button type="button" class="inline-flex rounded-md bg-red-50 p-1.5 text-red-500 hover:bg-red-100 focus:outline-none focus:ring-2 focus:ring-red-600 focus:ring-offset-2 focus:ring-offset-red-50 undo-btn transition-colors">
          <span class="sr-only">Undo</span>
          <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 15L3 9m0 0l6-6M3 9h12a6 6 0 010 12h-3" />
          </svg>
        </button>
      </div>
    </div>
  `;

  container.appendChild(notification);

  const undoBtn = notification.querySelector('.undo-btn');
  let undoTimeout;

  undoBtn.addEventListener('click', async () => {
    clearTimeout(undoTimeout);
    try {
      const response = await fetch('/events/' + itemId + '/restore', { method: 'POST' });
      if (response.ok) {
        notification.remove();
        const successMsg = document.createElement('div');
        successMsg.className = 'mb-4 rounded-md bg-green-50 bg-opacity-95 p-4 border border-green-200 max-w-md';
        successMsg.innerHTML = `
          <div class="flex">
            <div class="flex-shrink-0">
              <svg class="h-5 w-5 text-green-400" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.236 4.53L8.53 10.96a.75.75 0 00-1.06 1.061l2.03 2.03a.75.75 0 001.137-.089l3.857-5.401z" clip-rule="evenodd" />
              </svg>
            </div>
            <div class="ml-3">
              <p class="text-sm font-medium text-green-800">
                ${itemName} has been restored
              </p>
            </div>
          </div>
        `;
        container.appendChild(successMsg);
        setTimeout(() => {
          successMsg.remove();
          window.location.reload();
        }, 3000);
      } else {
        alert('Failed to restore ' + itemName);
      }
    } catch (error) {
      console.error('Error restoring:', error);
      alert('Error restoring ' + itemName);
    }
  });

  // Auto-remove after 5 seconds
  undoTimeout = setTimeout(() => {
    notification.style.opacity = '0';
    notification.style.transition = 'opacity 0.3s ease-out';
    setTimeout(() => {
      notification.remove();
    }, 300);
  }, 5000);
}
</script>
