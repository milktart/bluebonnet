<!-- Trip Timeline Content - Used for both initial load and async refresh -->
<div class="p-6">
  <%
    // Shared helper functions
    const allItems = [];

    // Server-side formatting function (must match datetime-formatter.js)
    function formatDate(date) {
      const d = new Date(date);
      const day = String(d.getDate()).padStart(2, '0');
      const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
      const month = months[d.getMonth()];
      const year = d.getFullYear();
      return `${day} ${month} ${year}`;
    }

    // Helper function to extract flight number without airline code
    function getFlightNum(flightNumber) {
      const match = flightNumber.match(/(\d+)$/);
      return match ? match[1] : flightNumber;
    }

    // Helper function to extract city name from location string
    function getCityName(location) {
      if (location.includes(' - ')) {
        const parts = location.split(' - ')[1];
        if (parts && parts.includes(',')) {
          return parts.split(',')[0].trim();
        }
        return parts;
      }
      return location.split(' - ')[0] || location;
    }

    // Helper function to extract airport code from location
    function getAirportCode(location) {
      const match = (location || '').match(/^([A-Z]{3})/);
      return match ? match[1] : '';
    }

    // Helper function to calculate layover duration between two flights
    function calculateLayoverDuration(flight1ArrivalTime, flight2DepartureTime) {
      const arrival = new Date(flight1ArrivalTime);
      const departure = new Date(flight2DepartureTime);
      const diffMs = departure - arrival;
      const diffHours = diffMs / (1000 * 60 * 60);

      // Only show layover if less than 24 hours between flights
      if (diffMs <= 0 || diffHours >= 24) return null;

      const hours = Math.floor(diffHours);
      const minutes = Math.round((diffHours - hours) * 60);

      return { hours, minutes };
    }

    // Helper function to check if a hotel exists during the layover period
    function hasHotelDuringPeriod(startDateTime, endDateTime, hotels) {
      return hotels.some(h => {
        const hotelCheckIn = new Date(h.checkInDateTime);
        const hotelCheckOut = new Date(h.checkOutDateTime);
        // Check if hotel overlaps with the layover period
        return hotelCheckIn <= endDateTime && hotelCheckOut >= startDateTime;
      });
    }

    // Helper function to format layover text
    function getLayoverText(duration, airportCode) {
      if (duration.hours === 0) {
        return `━━━━ ${duration.minutes}m in ${airportCode} ━━━━`;
      }
      return `━━━━ ${duration.hours}h ${duration.minutes}m in ${airportCode} ━━━━`;
    }

    // Collect all items
    trip.flights.forEach(f => {
      const flightNum = getFlightNum(f.flightNumber);
      const airlineCode = f.flightNumber.replace(/\d+$/, '');
      const originCity = getCityName(f.origin);
      const destinationCity = getCityName(f.destination);
      allItems.push({
        type: 'flight',
        time: new Date(f.departureDateTime),
        data: f,
        display: `${airlineCode}${flightNum}: ${originCity} → ${destinationCity}`,
        hasSegment: true,
        marker: null,
        id: f.id
      });
    });

    trip.hotels.forEach(h => {
      allItems.push({
        type: 'hotel',
        time: new Date(h.checkInDateTime),
        data: h,
        display: h.hotelName,
        hasSegment: false,
        marker: null,
        id: h.id
      });
    });

    trip.transportation.forEach(t => {
      const originCity = getCityName(t.origin);
      const destinationCity = getCityName(t.destination);
      allItems.push({
        type: 'transportation',
        time: new Date(t.departureDateTime),
        data: t,
        display: `${t.method}: ${originCity} → ${destinationCity}`,
        hasSegment: true,
        marker: null,
        id: t.id
      });
    });

    trip.carRentals.forEach(c => {
      allItems.push({
        type: 'carRental',
        time: new Date(c.pickupDateTime),
        data: c,
        display: `${c.company}`,
        hasSegment: false,
        marker: null,
        id: c.id
      });
    });

    trip.events.forEach(e => {
      allItems.push({
        type: 'event',
        time: new Date(e.startDateTime),
        data: e,
        display: e.name,
        hasSegment: false,
        marker: null,
        id: e.id
      });
    });

    // Sort by time FIRST
    allItems.sort((a, b) => a.time - b.time);

    // Now assign markers in chronological order to items with segments
    let mapMarkerCounter = 0;
    allItems.forEach(item => {
      if (item.hasSegment) {
        mapMarkerCounter++;
        item.marker = mapMarkerCounter;
      }
    });

    // Pre-calculate layovers for all consecutive flights
    const layoversByFlightId = {};
    const layoversByDateKey = {};

    for (let i = 0; i < allItems.length - 1; i++) {
      if (allItems[i].type === 'flight' && allItems[i + 1].type === 'flight') {
        const currentFlight = allItems[i];
        const nextFlight = allItems[i + 1];
        const layoverDuration = calculateLayoverDuration(currentFlight.data.arrivalDateTime, nextFlight.data.departureDateTime);

        if (layoverDuration) {
          // Layover < 24 hours
          const layoverInfo = {
            type: 'short',
            duration: layoverDuration,
            airport: getAirportCode(currentFlight.data.destination),
            text: getLayoverText(layoverDuration, getAirportCode(currentFlight.data.destination))
          };

          // Get departure dates to check if they're on different days
          let currentFlightDateKey, nextFlightDateKey;
          let timezone = currentFlight.data.originTimezone;
          if (timezone) {
            currentFlightDateKey = formatInTimezone(currentFlight.time, timezone, 'YYYY-MM-DD');
          } else {
            currentFlightDateKey = currentFlight.time.toISOString().split('T')[0];
          }

          timezone = nextFlight.data.originTimezone;
          if (timezone) {
            nextFlightDateKey = formatInTimezone(nextFlight.time, timezone, 'YYYY-MM-DD');
          } else {
            nextFlightDateKey = nextFlight.time.toISOString().split('T')[0];
          }

          // If on different dates, store with next flight's date; otherwise store with current flight
          if (currentFlightDateKey !== nextFlightDateKey) {
            layoversByDateKey[nextFlightDateKey] = layoverInfo;
          } else {
            layoversByFlightId[currentFlight.id] = layoverInfo;
          }
        } else {
          // Layover >= 24 hours - check if accommodation exists
          const layoverStart = new Date(currentFlight.data.arrivalDateTime);
          const layoverEnd = new Date(nextFlight.data.departureDateTime);
          const hasHotel = hasHotelDuringPeriod(layoverStart, layoverEnd, trip.hotels);

          if (!hasHotel) {
            layoversByFlightId[currentFlight.id] = {
              type: 'long',
              city: getCityName(currentFlight.data.destination),
              arrivalDateTime: currentFlight.data.arrivalDateTime,
              departureDateTime: nextFlight.data.departureDateTime,
              destinationTimezone: currentFlight.data.destinationTimezone
            };
          }
        }
      }
    }

    const itemsByDate = {};
    allItems.forEach(item => {
      // Get timezone for this item to convert date to local timezone
      let timezone = null;
      if (item.type === 'flight' && item.data.originTimezone) {
        timezone = item.data.originTimezone;
      } else if (item.type === 'hotel' && item.data.timezone) {
        timezone = item.data.timezone;
      } else if (item.type === 'transportation' && item.data.originTimezone) {
        timezone = item.data.originTimezone;
      } else if (item.type === 'carRental' && item.data.pickupTimezone) {
        timezone = item.data.pickupTimezone;
      } else if (item.type === 'event' && item.data.timezone) {
        timezone = item.data.timezone;
      }

      // Format date in local timezone for grouping
      let dateKey;
      if (timezone) {
        const dateStr = formatInTimezone(item.time, timezone, 'YYYY-MM-DD');
        dateKey = dateStr;
      } else {
        // Fallback to UTC if no timezone
        dateKey = item.time.toISOString().split('T')[0];
      }

      if (!itemsByDate[dateKey]) itemsByDate[dateKey] = [];
      itemsByDate[dateKey].push(item);
    });
  %>

  <% if (allItems.length === 0) { %>
    <div class="text-center py-12">
      <div class="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
        <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"/>
        </svg>
      </div>
      <h3 class="text-lg font-medium text-gray-900 mb-2">No items yet</h3>
      <p class="text-gray-500 mb-6">Add flights, hotels, or activities to see them here</p>
      <button onclick="showAddItemMenu()" class="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">
        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
        </svg>
        Add first item
      </button>
    </div>
  <% } else { %>
    <div class="space-y-4">
      <% Object.keys(itemsByDate).forEach(dateKey => {
        // Parse dateKey back to Date for display
        const [year, month, day] = dateKey.split('-');
        const displayDate = new Date(year, parseInt(month) - 1, day);
      %>
        <div class="border-l-2 border-blue-200 pl-4 ml-2">
          <div class="mb-3 flex items-center justify-between">
            <div class="inline-block px-3 py-1 bg-blue-100 text-blue-800 text-sm font-medium rounded-full">
              <%- formatDate(displayDate) %>
            </div>
            <%
              const layoverForDate = layoversByDateKey[dateKey];
              if (layoverForDate && layoverForDate.type === 'short') {
            %>
              <div class="text-xs text-gray-500 font-medium layover-duration" style="border: none; padding: 0; margin: 0;">
                <%= layoverForDate.text %>
              </div>
            <%
              }
            %>
          </div>
          <div class="space-y-2">
            <%
              const dateItems = itemsByDate[dateKey];
              dateItems.forEach((item, itemIndex) => {
              // Get timezone for this item based on its type
              let timezone = null;
              if (item.type === 'flight' && item.data.originTimezone) {
                timezone = item.data.originTimezone;
              } else if (item.type === 'hotel' && item.data.timezone) {
                timezone = item.data.timezone;
              } else if (item.type === 'transportation' && item.data.originTimezone) {
                timezone = item.data.originTimezone;
              } else if (item.type === 'carRental' && item.data.pickupTimezone) {
                timezone = item.data.pickupTimezone;
              } else if (item.type === 'event' && item.data.timezone) {
                timezone = item.data.timezone;
              }

              // Format time in the appropriate timezone
              const timeStr = formatInTimezone(item.data.departureDateTime || item.data.checkInDateTime || item.data.pickupDateTime || item.data.startDateTime, timezone, 'HH:mm');
              const [hours, minutes] = timeStr.split(':');
              const typeClass = `marker-${item.type}`;
            %>
              <div class="timeline-item flex items-start space-x-3 p-3 rounded-lg border border-gray-100 hover:border-gray-200 transition-colors cursor-pointer"
                   data-item-id="<%= item.id %>"
                   data-item-type="<%= item.type %>"
                   data-marker="<%= item.marker || '' %>"
                   onmouseover="highlightMapMarker('<%= item.marker || '' %>', '<%= item.type %>')"
                   onmouseout="unhighlightMapMarker('<%= item.marker || '' %>')"
                   onclick="editItem('<%= item.type %>', '<%= item.id %>')">

                <% if (item.type === 'flight') { %>
                  <span class="material-symbols-outlined text-blue-600 text-sm">flight</span>
                <% } else if (item.type === 'hotel') { %>
                  <span class="material-symbols-outlined text-green-600 text-sm">hotel</span>
                <% } else if (item.type === 'transportation') { %>
                  <span class="material-symbols-outlined text-amber-600 text-sm">train</span>
                <% } else if (item.type === 'carRental') { %>
                  <span class="material-symbols-outlined text-gray-600 text-sm">directions_car</span>
                <% } else if (item.type === 'event') { %>
                  <span class="material-symbols-outlined text-red-600 text-sm">event</span>
                <% } %>

                <div class="flex-1 min-w-0">
                  <div class="flex items-center space-x-2 mb-1">
                    <span class="text-xs font-medium text-gray-900"><%= hours %>:<%= minutes %></span>
                  </div>
                  <p class="text-sm text-gray-600"><%= item.display %></p>
                </div>
                <div class="flex-shrink-0">
                  <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                  </svg>
                </div>
              </div>

              <!-- Display layover information if applicable -->
              <%
                const layoverInfo = layoversByFlightId[item.id];
                if (item.type === 'flight' && layoverInfo) {
                  if (layoverInfo.type === 'short') {
              %>
                <div class="flex items-center justify-center px-2">
                  <div class="text-xs text-gray-500 font-medium layover-duration">
                    <%= layoverInfo.text %>
                  </div>
                </div>
              <%
                  } else if (layoverInfo.type === 'long') {
              %>
                <div class="accommodation-suggestion bg-amber-50 rounded-lg" onclick="showAddFormWithLayoverDates('hotel', '<%= layoverInfo.arrivalDateTime %>', '<%= layoverInfo.departureDateTime %>', '<%= layoverInfo.destinationTimezone %>')">
                  <div class="flex items-center space-x-3 p-3 w-full">
                    <span class="material-symbols-outlined text-amber-600 text-sm flex-shrink-0">hotel</span>
                    <div class="flex-1 min-w-0">
                      <p class="text-sm text-amber-900 font-medium">Do you have accommodation in <%= layoverInfo.city %>?</p>
                      <p class="text-xs text-amber-700">Add a hotel for your layover</p>
                    </div>
                    <svg class="w-4 h-4 text-amber-600 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                    </svg>
                  </div>
                </div>
              <%
                  }
                }
              %>
            <% }) %>
          </div>
        </div>
      <% }) %>
    </div>
  <% } %>
</div>
