<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %></title>
  <!-- Core Application CSS -->
  <link rel="stylesheet" href="/css/core.css">
  <!-- Leaflet CSS -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
  <!-- Google Material Symbols -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
  <!-- Tailwind CSS -->
  <link href="https://unpkg.com/tailwindcss@^2.0/dist/tailwind.min.css" rel="stylesheet">
  <!-- Trips Styles -->
  <link href="/css/trips.css" rel="stylesheet">
</head>
<body class="overflow-hidden">
  <!-- Navigation hidden on this full-screen map view -->
  <div class="hide-nav">
    <%- include('../partials/nav') %>
  </div>

  <!-- Full-screen map -->
  <div id="tripMap"></div>

  <!-- Tertiary Sidebar - for editing forms -->
  <div id="tertiary-sidebar" class="tertiary-sidebar sidebar">
    <div class="p-6">
      <div id="tertiary-sidebar-content">
        <!-- Dynamic edit content will be inserted here -->
      </div>
    </div>
  </div>

  <!-- Secondary Sidebar - for dynamic content (Account Settings, Companions, etc.) -->
  <div id="secondary-sidebar" class="secondary-sidebar sidebar">
    <div class="p-6">
      <div id="secondary-sidebar-content">
        <!-- Account Settings and Companions content will be loaded here -->
      </div>
      <div id="create-trip-form" style="display: none;">
        <div class="flex items-center justify-between mb-6">
          <h2 class="text-lg font-bold text-gray-900">Create New Trip</h2>
          <button onclick="closeSecondarySidebar()" class="text-gray-400 hover:text-gray-600">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
            </svg>
          </button>
        </div>

      <form action="/trips" method="POST" class="space-y-4">
        <div>
          <label for="name" class="block text-sm font-medium text-gray-700 mb-1">Trip Name *</label>
          <input type="text" id="name" name="name" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="e.g., Tokyo Adventure">
        </div>

        <div class="grid grid-cols-2 gap-4">
          <!-- Departure Date -->
          <div>
            <label for="departureDate" class="block text-sm font-medium text-gray-700 mb-1">Departure Date *</label>
            <input type="date" id="departureDate" name="departureDate" required
                   class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
          </div>

          <!-- Return Date -->
          <div>
            <label for="returnDate" class="block text-sm font-medium text-gray-700 mb-1">Return Date *</label>
            <input type="date" id="returnDate" name="returnDate" required
                   class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
          </div>
        </div>

        <div>
          <label for="purpose" class="block text-sm font-medium text-gray-700 mb-1">Purpose</label>
          <select id="purpose" name="purpose" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent appearance-none bg-white">
            <option value="pleasure" selected>Pleasure</option>
            <option value="business">Business</option>
            <option value="other">Other</option>
          </select>
        </div>

        <div>
          <label for="description" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
          <textarea id="description" name="description" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="Brief description of your trip..."></textarea>
        </div>

        <div class="flex space-x-3 pt-4">
          <button type="submit" class="flex-1 bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors">
            Create Trip
          </button>
          <button type="button" onclick="closeSecondarySidebar()" class="px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 transition-colors">
            Cancel
          </button>
        </div>
      </form>
      </div>

      <div id="create-event-form" style="display: none;">
        <div class="flex items-center justify-between mb-6">
          <h2 class="text-lg font-bold text-gray-900">Create Event</h2>
          <button onclick="closeSecondarySidebar()" class="text-gray-400 hover:text-gray-600">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
            </svg>
          </button>
        </div>

        <form action="/events/standalone" method="POST" class="space-y-4">
          <div>
            <label for="eventName" class="block text-sm font-medium text-gray-700 mb-1">Event Name *</label>
            <input type="text" id="eventName" name="name" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="e.g., Conference, Concert">
          </div>

          <div>
            <label for="eventLocation" class="block text-sm font-medium text-gray-700 mb-1">Location *</label>
            <input type="text" id="eventLocation" name="location" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="e.g., San Francisco, CA">
          </div>

          <div class="grid grid-cols-2 gap-4">
            <div>
              <label for="eventStartDate" class="block text-sm font-medium text-gray-700 mb-1">Start Date *</label>
              <input type="date" id="eventStartDate" name="startDate" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
            </div>
            <div>
              <label for="eventStartTime" class="block text-sm font-medium text-gray-700 mb-1">Start Time *</label>
              <input type="time" id="eventStartTime" name="startTime" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
            </div>
          </div>

          <div class="grid grid-cols-2 gap-4">
            <div>
              <label for="eventEndDate" class="block text-sm font-medium text-gray-700 mb-1">End Date *</label>
              <input type="date" id="eventEndDate" name="endDate" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
            </div>
            <div>
              <label for="eventEndTime" class="block text-sm font-medium text-gray-700 mb-1">End Time *</label>
              <input type="time" id="eventEndTime" name="endTime" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
            </div>
          </div>

          <div>
            <label for="eventDescription" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
            <textarea id="eventDescription" name="description" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="Add notes about this event..."></textarea>
          </div>

          <div class="flex space-x-3 pt-4">
            <button type="submit" class="flex-1 bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors">
              Create Event
            </button>
            <button type="button" onclick="closeSecondarySidebar()" class="px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 transition-colors">
              Cancel
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Primary Sidebar -->
  <div class="primary-sidebar sidebar">
    <!-- Fixed Header -->
    <div class="sidebar-header p-6">
      <!-- Header -->
      <div class="flex items-center justify-between mb-6">
        <div class="flex items-center space-x-3">
          <div class="w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center">
            <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"/>
            </svg>
          </div>
          <h1 class="text-xl font-bold text-gray-900">My Trips</h1>
        </div>
        <div class="flex items-center space-x-2">
          <button
            onclick="showCreateEventForm()"
            class="inline-flex items-center px-3 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
            </svg>
            Event
          </button>
          <button
            onclick="showCreateTripForm()"
            class="inline-flex items-center px-3 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
            </svg>
            Trip
          </button>
        </div>
      </div>

      <!-- Flash messages -->
      <%- include('../partials/flash') %>

      <!-- Tabs for Upcoming/Past/Settings -->
      <div class="border-b border-gray-200 -mx-6">
        <nav class="-mb-px flex justify-between px-6">
          <div class="flex">
            <button
              id="upcoming-tab"
              class="py-3 px-4 border-b-2 border-blue-500 font-medium text-sm text-blue-600 bg-blue-50 rounded-t-lg transition-all duration-200"
              onclick="showUpcomingTrips()"
            >
              <div class="flex items-center space-x-2">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                </svg>
                <span>Upcoming</span>
              </div>
            </button>
            <button
              id="past-tab"
              class="py-3 px-4 border-b-2 border-transparent font-medium text-sm text-gray-500 hover:text-gray-700 hover:bg-gray-50 hover:border-gray-300 rounded-t-lg transition-all duration-200"
              onclick="showPastTrips()"
            >
              <div class="flex items-center space-x-2">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                </svg>
                <span>Past</span>
              </div>
            </button>
          </div>
          <button
            id="settings-tab"
            class="py-3 px-4 border-b-2 border-transparent font-medium text-sm text-gray-500 hover:text-gray-700 hover:bg-gray-50 hover:border-gray-300 rounded-t-lg transition-all duration-200"
            onclick="showSettings()"
          >
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"/>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
            </svg>
          </button>
        </nav>
      </div>
    </div>

    <!-- Scrollable Content -->
    <div class="sidebar-content">

      <!-- No trips state -->
      <% if (trips.length === 0) { %>
        <div class="text-center py-12 px-6">
          <div class="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"/>
            </svg>
          </div>
          <h3 class="text-lg font-medium text-gray-900 mb-2">No trips yet</h3>
          <p class="text-gray-500 mb-6">Get started by creating your first trip</p>
          <button onclick="showCreateTripForm()" class="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
            </svg>
            Create first trip
          </button>
        </div>
      <% } else { %>

      <%
        // Server-side formatting functions (must match datetime-formatter.js)
        function formatDate(date) {
          const d = new Date(date);
          const day = String(d.getDate()).padStart(2, '0');
          const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
          const month = months[d.getMonth()];
          const year = d.getFullYear();
          return `${day} ${month} ${year}`;
        }

        const now = new Date();
        const upcomingTrips = [];
        const pastTrips = [];

        trips.forEach(trip => {
          const returnDate = new Date(trip.returnDate);
          let isPast = returnDate < now;

          if (!isPast && trip.flights && trip.flights.length > 0) {
            const lastFlight = trip.flights.reduce((latest, f) => {
              const arrivalDate = f.arrivalDateTime ? new Date(f.arrivalDateTime) : new Date(0);
              return arrivalDate > latest ? arrivalDate : latest;
            }, new Date(0));
            if (lastFlight > new Date(0) && lastFlight < now) isPast = true;
          }

          if (!isPast && trip.hotels && trip.hotels.length > 0) {
            const lastHotel = trip.hotels.reduce((latest, h) => {
              const checkoutDate = h.checkOutDateTime ? new Date(h.checkOutDateTime) : new Date(0);
              return checkoutDate > latest ? checkoutDate : latest;
            }, new Date(0));
            if (lastHotel > new Date(0) && lastHotel < now) isPast = true;
          }

          if (!isPast && trip.transportation && trip.transportation.length > 0) {
            const lastTransport = trip.transportation.reduce((latest, t) => {
              const arrivalDate = t.arrivalDateTime ? new Date(t.arrivalDateTime) : new Date(0);
              return arrivalDate > latest ? arrivalDate : latest;
            }, new Date(0));
            if (lastTransport > new Date(0) && lastTransport < now) isPast = true;
          }

          if (!isPast && trip.carRentals && trip.carRentals.length > 0) {
            const lastRental = trip.carRentals.reduce((latest, c) => {
              const dropoffDate = c.dropoffDateTime ? new Date(c.dropoffDateTime) : new Date(0);
              return dropoffDate > latest ? dropoffDate : latest;
            }, new Date(0));
            if (lastRental > new Date(0) && lastRental < now) isPast = true;
          }

          if (!isPast && trip.events && trip.events.length > 0) {
            const lastEvent = trip.events.reduce((latest, e) => {
              const endDate = e.endDateTime ? new Date(e.endDateTime) : new Date(0);
              return endDate > latest ? endDate : latest;
            }, new Date(0));
            if (lastEvent > new Date(0) && lastEvent < now) isPast = true;
          }

          if (isPast) {
            pastTrips.push(trip);
          } else {
            upcomingTrips.push(trip);
          }
        });
      %>

      <div class="tab-content">
        <!-- UPCOMING TRIPS TAB -->
        <div class="tab-pane fade show active" id="upcomingTrips">
          <% if (upcomingTrips.length === 0) { %>
            <div class="alert alert-info m-4">
              <i class="bi bi-info-circle"></i> No upcoming trips.
            </div>
          <% } else { %>
            <%
              // Helper function to extract flight number without airline code
              function getFlightNum(flightNumber) {
                const match = flightNumber.match(/(\d+)$/);
                return match ? match[1] : flightNumber;
              }

              // Helper function to extract city name from location string
              function getCityName(location) {
                if (location.includes(' - ')) {
                  const parts = location.split(' - ')[1];
                  if (parts && parts.includes(',')) {
                    return parts.split(',')[0].trim();
                  }
                  return parts;
                }
                return location.split(' - ')[0] || location;
              }

              // First, collect ALL items from all trips (with trip reference) AND standalone items
              const allItemsWithTrip = [];

              // Add standalone items first
              if (typeof standaloneFlights !== 'undefined' && standaloneFlights) {
                standaloneFlights.forEach(f => {
                  const flightNum = getFlightNum(f.flightNumber);
                  const airlineCode = f.flightNumber.replace(/\d+$/, '');
                  const originCity = getCityName(f.origin);
                  const destinationCity = getCityName(f.destination);
                  allItemsWithTrip.push({
                    type: 'flight',
                    time: new Date(f.departureDateTime),
                    data: f,
                    tripId: null,
                    trip: null,
                    display: `<span class="material-symbols-outlined text-blue-600 inline-icon" style="font-size: 16px;">flights</span> ${airlineCode}${flightNum}: ${originCity} → ${destinationCity}`,
                    hasSegment: true,
                    marker: null
                  });
                });
              }

              if (typeof standaloneTransportation !== 'undefined' && standaloneTransportation) {
                standaloneTransportation.forEach(t => {
                  const originCity = getCityName(t.origin);
                  const destinationCity = getCityName(t.destination);
                  allItemsWithTrip.push({
                    type: 'transportation',
                    time: new Date(t.departureDateTime),
                    data: t,
                    tripId: null,
                    trip: null,
                    display: `<span class="material-symbols-outlined text-amber-600 inline-icon" style="font-size: 16px;">train</span> ${t.method}: ${originCity} → ${destinationCity}`,
                    hasSegment: true,
                    marker: null
                  });
                });
              }

              if (typeof standaloneEvents !== 'undefined' && standaloneEvents) {
                standaloneEvents.forEach(e => {
                  allItemsWithTrip.push({
                    type: 'event',
                    time: new Date(e.startDateTime),
                    data: e,
                    tripId: null,
                    trip: null,
                    display: `<span class="material-symbols-outlined text-red-600 inline-icon" style="font-size: 16px;">event</span> ${e.name}`,
                    hasSegment: false,
                    marker: null
                  });
                });
              }

              upcomingTrips.forEach(trip => {
                // Add flights
                if (trip.flights && Array.isArray(trip.flights)) {
                  trip.flights.forEach(f => {
                    const flightNum = getFlightNum(f.flightNumber);
                    const airlineCode = f.flightNumber.replace(/\d+$/, '');
                    const originCity = getCityName(f.origin);
                    const destinationCity = getCityName(f.destination);
                    allItemsWithTrip.push({
                      type: 'flight',
                      time: new Date(f.departureDateTime),
                      data: f,
                      tripId: trip.id,
                      trip: trip,
                      display: `<span class="material-symbols-outlined text-blue-600 inline-icon" style="font-size: 16px;">flight</span> ${airlineCode}${flightNum}: ${originCity} → ${destinationCity}`,
                      hasSegment: true,
                      marker: null
                    });
                  });
                }

                // Add transportation
                if (trip.transportation && Array.isArray(trip.transportation)) {
                  trip.transportation.forEach(t => {
                    const originCity = getCityName(t.origin);
                    const destinationCity = getCityName(t.destination);
                    allItemsWithTrip.push({
                      type: 'transportation',
                      time: new Date(t.departureDateTime),
                      data: t,
                      tripId: trip.id,
                      trip: trip,
                      display: `<span class="material-symbols-outlined text-amber-600 inline-icon" style="font-size: 16px;">train</span> ${t.method}: ${originCity} → ${destinationCity}`,
                      hasSegment: true,
                      marker: null
                    });
                  });
                }

                // Add events
                if (trip.events && Array.isArray(trip.events)) {
                  trip.events.forEach(e => {
                    allItemsWithTrip.push({
                      type: 'event',
                      time: new Date(e.startDateTime),
                      data: e,
                      tripId: trip.id,
                      trip: trip,
                      display: `<span class="material-symbols-outlined text-red-600 inline-icon" style="font-size: 16px;">event</span> ${e.name}`,
                      hasSegment: false,
                      marker: null
                    });
                  });
                }
              });

              // Sort ALL items chronologically
              allItemsWithTrip.sort((a, b) => a.time - b.time);

              // Assign markers in chronological order
              let mapMarkerCounter = 0;
              allItemsWithTrip.forEach(item => {
                if (item.hasSegment) {
                  mapMarkerCounter++;
                  item.marker = mapMarkerCounter;
                }
              });

              // Now group items by trip for display
              const tripItems = [];

              // Add standalone items as individual cards (not grouped)
              const standaloneItems = allItemsWithTrip.filter(item => item.tripId === null);
              standaloneItems.forEach(item => {
                tripItems.push({
                  trip: null,
                  items: [item],
                  isStandalone: true,
                  standaloneType: item.type,
                  sortTime: item.time
                });
              });

              upcomingTrips.forEach(trip => {
                const items = allItemsWithTrip.filter(item => item.tripId === trip.id);

                // Add trip even if it has no items
                tripItems.push({
                  trip: trip,
                  items: items,
                  isStandalone: false,
                  sortTime: items.length > 0 ? items[0].time : new Date(trip.departureDate)
                });
              });

              // Sort all items (trips and standalone events) chronologically
              tripItems.sort((a, b) => a.sortTime - b.sortTime);
            %>

        <!-- Upcoming Trips Content -->
        <div id="upcoming-content" class="space-y-4 p-6">
          <% if (tripItems.length === 0) { %>
            <div class="text-center py-8">
              <p class="text-gray-500">No upcoming trips to display.</p>
            </div>
          <% } else { %>
            <div class="space-y-3">
              <% tripItems.forEach((tripData, tripIndex) => { %>
                <% if (tripData.isStandalone) { %>
                  <%
                    const item = tripData.items[0];
                  %>
                  <!-- Standalone item - single card with no accordion -->
                  <div class="border border-gray-200 rounded-lg bg-white shadow-sm hover:shadow-md hover:border-gray-300 transition-all cursor-pointer"
                       onclick="<% if (item.type === 'event') { %>loadSidebarContent('/events/<%= item.data.id %>/sidebar')<% } %>">
                    <div class="py-4 px-5 inline-flex items-center gap-x-3 w-full font-medium"> <!-- font-semibold -->
                      <%
                        const hours = String(item.time.getHours()).padStart(2, '0');
                        const minutes = String(item.time.getMinutes()).padStart(2, '0');
                        let standaloneIcon, standaloneColor, standaloneLabel, displayName, startDateTime, endDateTime, location;

                        if (item.type === 'event') {
                          standaloneIcon = 'event';
                          standaloneColor = 'red';
                          displayName = item.data.name;
                          const startHours = String(item.time.getHours()).padStart(2, '0');
                          const startMinutes = String(item.time.getMinutes()).padStart(2, '0');
                          const startDateStr = formatDate(item.time);
                          startDateTime = `${startDateStr} ${startHours}:${startMinutes}`;

                          if (item.data.endDateTime && item.data.endDateTime !== item.data.startDateTime) {
                            const endTime = new Date(item.data.endDateTime);
                            const endDateStr = formatDate(endTime);
                            const endHours = String(endTime.getHours()).padStart(2, '0');
                            const endMinutes = String(endTime.getMinutes()).padStart(2, '0');

                            // If same date, only show time range. If different dates, show both
                            if (startDateStr === endDateStr) {
                              startDateTime = `${startDateStr} ${startHours}:${startMinutes} - ${endHours}:${endMinutes}`;
                            } else {
                              startDateTime += ` - ${endDateStr} ${endHours}:${endMinutes}`;
                            }
                          }
                          location = item.data.location || '';
                        } else if (item.type === 'flight') {
                          standaloneIcon = 'flights';
                          standaloneColor = 'blue';
                          const flightNum = item.data.flightNumber.match(/(\d+)$/)?.[1] || '';
                          const airlineCode = item.data.flightNumber.replace(/\d+$/, '');
                          displayName = `${airlineCode}${flightNum}`;
                          const originCity = getCityName(item.data.origin);
                          const destCity = getCityName(item.data.destination);
                          startDateTime = `${formatDate(item.time)} ${hours}:${minutes}`;
                          location = `${originCity} → ${destCity}`;
                        } else if (item.type === 'transportation') {
                          standaloneIcon = 'train';
                          standaloneColor = 'amber';
                          displayName = item.data.method;
                          const originCity = getCityName(item.data.origin);
                          const destCity = getCityName(item.data.destination);
                          startDateTime = `${formatDate(item.time)} ${hours}:${minutes}`;
                          location = `${originCity} → ${destCity}`;
                        }
                      %>
                      <div class="w-8 h-8 bg-<%= standaloneColor %>-100 rounded-lg flex items-center justify-center flex-shrink-0">
                        <span class="material-symbols-outlined text-<%= standaloneColor %>-600" style="font-size: 16px;"><%= standaloneIcon %></span>
                      </div>
                      <div class="flex-1 min-w-0">
                        <h3 class="text-sm font-medium text-gray-900"><%= displayName %></h3>
                        <p class="text-xs text-gray-500"><%= startDateTime %></p>
                        <% if (location) { %>
                          <p class="text-xs text-gray-600 italic"><%= location %></p>
                        <% } %>
                      </div>
                    </div>
                  </div>
                <% } else { %>
                  <!-- Trip card with accordion -->
                  <div class="border border-gray-200 rounded-lg bg-white shadow-sm">
                    <button class="w-full py-4 px-5 inline-flex items-center justify-between gap-x-3 font-medium text-start text-gray-800 hover:bg-gray-50 rounded-lg transition-colors"
                            onclick="toggleAccordion('upcoming-<%= tripIndex %>')"> <!-- font-semibold -->
                      <div class="flex items-center space-x-3">
                        <%
                          // Determine icon based on trip purpose
                          let tripIcon = 'flights_and_hotels'; // default
                          let iconClass = 'text-blue-600';
                          let bgClass = 'bg-blue-100';

                          if (tripData.trip.purpose === 'business') {
                            tripIcon = 'badge';
                            iconClass = 'text-purple-600';
                            bgClass = 'bg-purple-100';
                          } else if (tripData.trip.purpose === 'leisure' || tripData.trip.purpose === 'family' || tripData.trip.purpose === 'romantic') {
                            tripIcon = 'hotel';
                            iconClass = 'text-green-600';
                            bgClass = 'bg-green-100';
                          }

                          // Extract unique cities from all items in this trip (exclude events)
                          const tripCities = new Set();
                          tripData.items.forEach(item => {
                            // Skip events - only extract from flights, hotels, transportation, and car rentals
                            if (item.type === 'event') return;

                            if (item.data.origin) {
                              const originCity = getCityName(item.data.origin);
                              if (originCity) tripCities.add(originCity);
                            }
                            if (item.data.destination) {
                              const destCity = getCityName(item.data.destination);
                              if (destCity) tripCities.add(destCity);
                            }
                            if (item.data.hotelName && item.data.address) {
                              const hotelCity = getCityName(item.data.address);
                              if (hotelCity) tripCities.add(hotelCity);
                            }
                            if (item.data.pickupLocation) {
                              const pickupCity = getCityName(item.data.pickupLocation);
                              if (pickupCity) tripCities.add(pickupCity);
                            }
                          });
                          const citiesList = Array.from(tripCities).sort().join(', ');
                        %>
                        <div class="w-8 h-8 <%= bgClass %> rounded-lg flex items-center justify-center">
                          <span class="material-symbols-outlined <%= iconClass %>" style="font-size: 16px;"><%= tripIcon %></span>
                        </div>
                        <div onclick="window.location.href='/trips/<%= tripData.trip.id %>'; event.stopPropagation();" style="cursor: pointer;" class="flex-1 text-left">
                          <h3 class="text-sm font-medium text-gray-900 hover:text-blue-600"><%= tripData.trip.name %></h3>
                          <p class="text-xs text-gray-500"><%= formatDate(tripData.trip.departureDate) %> - <%= formatDate(tripData.trip.returnDate) %></p>
                          <% if (citiesList) { %>
                            <p class="text-xs text-gray-600 italic"><%= citiesList %></p>
                          <% } %>
                        </div>
                      </div>
                      <svg class="accordion-arrow w-4 h-4 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m6 9 6 6 6-6"/>
                      </svg>
                    </button>

                    <div id="upcoming-<%= tripIndex %>" class="accordion-content hidden">
                      <div class="pb-4 px-5">
                        <% if (tripData.items.length === 0) { %>
                          <div class="text-center py-4">
                            <p class="text-sm text-gray-500 italic">No activities added yet. Click trip name to add details.</p>
                          </div>
                        <% } else { %>
                          <div class="space-y-2">
                            <% tripData.items.forEach((item, itemIndex) => {
                              const hours = String(item.time.getHours()).padStart(2, '0');
                              const minutes = String(item.time.getMinutes()).padStart(2, '0');
                              const typeClass = `marker-${item.type}`;
                            %>
                              <div class="trip-item flex items-start space-x-3 p-3 rounded-lg border border-gray-100 hover:border-gray-200 transition-colors cursor-pointer"
                                   data-trip-id="<%= tripData.tripId || '' %>"
                                   data-item-type="<%= item.type %>"
                                   data-marker="<%= item.marker || '' %>"
                                   onmouseover="highlightMapMarker('<%= item.marker || '' %>', '<%= item.type %>')"
                                   onmouseout="unhighlightMapMarker('<%= item.marker || '' %>')"
                                   onclick="window.location.href='/trips/<%= tripData.trip.id %>'">
                                <% if (item.marker) { %>
                                  <!-- <div class="timeline-marker <%= typeClass %> mt-1 flex-shrink-0"><%= item.marker %></div> -->
                                <% } %>
                                <div class="flex-1 min-w-0">
                                  <div class="flex items-center space-x-2 mb-1">
                                    <span class="text-xs font-medium text-gray-900"><%= formatDate(item.time) %> <%= hours %>:<%= minutes %></span>
                                  </div>
                                  <p class="text-sm text-gray-600"><%- item.display %></p>
                                </div>
                              </div>
                            <% }) %>
                          </div>
                        <% } %>
                      </div>
                    </div>
                  </div>
                <% } %>
              <% }) %>
            </div>
          <% } %>
        </div>

        <!-- Past Trips Content -->
        <div id="past-content" class="space-y-4 p-6 hidden">
          <% if (pastTrips.length === 0) { %>
            <div class="text-center py-8">
              <p class="text-gray-500">No past trips to display.</p>
            </div>
          <% } else { %>
            <%
              // Helper function to extract flight number without airline code
              function getFlightNum(flightNumber) {
                const match = flightNumber.match(/(\d+)$/);
                return match ? match[1] : flightNumber;
              }

              // Helper function to extract city name from location string
              function getCityName(location) {
                if (location.includes(' - ')) {
                  const parts = location.split(' - ')[1];
                  if (parts && parts.includes(',')) {
                    return parts.split(',')[0].trim();
                  }
                  return parts;
                }
                return location.split(' - ')[0] || location;
              }

              // Collect flights from past trips
              const pastTripItems = [];

              pastTrips.forEach(trip => {
                // Add flights only (not events or transportation for past trips)
                if (trip.flights && Array.isArray(trip.flights)) {
                  trip.flights.forEach(f => {
                    const flightNum = getFlightNum(f.flightNumber);
                    const airlineCode = f.flightNumber.replace(/\d+$/, '');
                    const originCity = getCityName(f.origin);
                    const destinationCity = getCityName(f.destination);
                    pastTripItems.push({
                      type: 'flight',
                      time: new Date(f.departureDateTime),
                      data: f,
                      tripId: trip.id,
                      trip: trip,
                      display: `<span class="material-symbols-outlined text-blue-600 inline-icon" style="font-size: 16px;">flight</span> ${airlineCode}${flightNum}: ${originCity} → ${destinationCity}`,
                      hasSegment: true,
                      marker: null
                    });
                  });
                }
              });

              // Sort flights chronologically
              pastTripItems.sort((a, b) => a.time - b.time);

              // Assign markers in chronological order
              let pastMapMarkerCounter = 0;
              pastTripItems.forEach(item => {
                if (item.hasSegment) {
                  pastMapMarkerCounter++;
                  item.marker = pastMapMarkerCounter;
                }
              });

              // Group items by trip for display
              const pastTripItemsGrouped = [];

              pastTrips.forEach(trip => {
                const items = pastTripItems.filter(item => item.tripId === trip.id);

                pastTripItemsGrouped.push({
                  trip: trip,
                  items: items,
                  isStandalone: false
                });
              });

              // Sort trips by earliest item time
              pastTripItemsGrouped.sort((a, b) => {
                const aTime = a.items.length > 0 ? a.items[0].time : (a.trip ? new Date(a.trip.departureDate) : new Date());
                const bTime = b.items.length > 0 ? b.items[0].time : (b.trip ? new Date(b.trip.departureDate) : new Date());
                return aTime - bTime;
              });
            %>

            <div class="space-y-3">
              <% pastTripItemsGrouped.forEach((tripData, tripIndex) => { %>
                <div class="border border-gray-200 rounded-lg bg-white shadow-sm">
                  <!-- Accordion Header -->
                  <button class="w-full py-4 px-5 inline-flex items-center justify-between gap-x-3 font-medium text-start text-gray-800 hover:bg-gray-50 rounded-lg transition-colors"
                          onclick="toggleAccordion('past-<%= tripIndex %>')"> <!-- font-semibold -->
                    <div class="flex items-center space-x-3">
                      <div class="w-8 h-8 bg-gray-100 rounded-lg flex items-center justify-center">
                        <svg class="w-4 h-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                        </svg>
                      </div>
                      <div onclick="window.location.href='/trips/<%= tripData.trip.id %>'; event.stopPropagation();" style="cursor: pointer;" class="flex-1 text-left">
                        <h3 class="text-sm font-medium text-gray-700 hover:text-gray-900"><%= tripData.trip.name %></h3>
                        <p class="text-xs text-gray-500"><%= formatDate(tripData.trip.departureDate) %> - <%= formatDate(tripData.trip.returnDate) %></p>
                      </div>
                    </div>
                    <svg class="accordion-arrow w-4 h-4 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m6 9 6 6 6-6"/>
                    </svg>
                  </button>

                  <!-- Accordion Content -->
                  <div id="past-<%= tripIndex %>" class="accordion-content hidden">
                    <div class="pb-4 px-5">
                      <% if (tripData.items.length === 0) { %>
                        <div class="text-center py-4">
                          <p class="text-sm text-gray-500 italic">No flights recorded for this past trip.</p>
                        </div>
                      <% } else { %>
                        <div class="space-y-2">
                          <% tripData.items.forEach((item, itemIndex) => {
                            const hours = String(item.time.getHours()).padStart(2, '0');
                            const minutes = String(item.time.getMinutes()).padStart(2, '0');
                            const typeClass = `marker-${item.type}`;
                          %>
                            <div class="trip-item flex items-start space-x-3 p-3 rounded-lg border border-gray-100 hover:border-gray-200 transition-colors cursor-pointer"
                                 data-trip-id="<%= tripData.trip.id %>"
                                 data-item-type="<%= item.type %>"
                                 data-marker="<%= item.marker || '' %>"
                                 onmouseover="highlightMapMarker('<%= item.marker || '' %>', '<%= item.type %>')"
                                 onmouseout="unhighlightMapMarker('<%= item.marker || '' %>')"
                                 onclick="window.location.href='/trips/<%= tripData.trip.id %>'">
                              <% if (item.marker) { %>
                                <!-- <div class="timeline-marker <%= typeClass %> mt-1 flex-shrink-0"><%= item.marker %></div> -->
                              <% } %>
                              <div class="flex-1 min-w-0">
                                <div class="flex items-center space-x-2 mb-1">
                                  <span class="text-xs font-medium text-gray-900"><%= formatDate(item.time) %> <%= hours %>:<%= minutes %></span>
                                </div>
                                <p class="text-sm text-gray-600"><%- item.display %></p>
                              </div>
                            </div>
                          <% }) %>
                        </div>
                      <% } %>
                    </div>
                  </div>
                </div>
              <% }) %>
            </div>
          <% } %>
        </div>

        <!-- Settings Content -->
        <div id="settings-content" class="space-y-4 p-6 hidden">
          <div class="space-y-3">
            <button onclick="loadSidebarContent('/account/sidebar')" class="w-full flex items-center space-x-3 p-4 rounded-lg border border-gray-200 hover:border-gray-300 hover:bg-gray-50 transition-colors">
              <div class="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
                <svg class="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                </svg>
              </div>
              <div class="flex-1 text-left">
                <h3 class="text-sm font-medium text-gray-900">Account Settings</h3>
                <p class="text-xs text-gray-500">Manage your profile and preferences</p>
              </div>
              <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
              </svg>
            </button>

            <button onclick="loadSidebarContent('/companions/sidebar')" class="w-full flex items-center space-x-3 p-4 rounded-lg border border-gray-200 hover:border-gray-300 hover:bg-gray-50 transition-colors">
              <div class="w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center">
                <svg class="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"/>
                </svg>
              </div>
              <div class="flex-1 text-left">
                <h3 class="text-sm font-medium text-gray-900">Travel Companions</h3>
                <p class="text-xs text-gray-500">Manage your travel companions</p>
              </div>
              <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
              </svg>
            </button>

            <button onclick="confirmLogout()" class="w-full flex items-center space-x-3 p-4 rounded-lg border border-gray-200 hover:border-red-300 hover:bg-red-50 transition-colors">
              <div class="w-8 h-8 bg-red-100 rounded-lg flex items-center justify-center">
                <svg class="w-4 h-4 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"/>
                </svg>
              </div>
              <div class="flex-1 text-left">
                <h3 class="text-sm font-medium text-red-600">Sign Out</h3>
                <p class="text-xs text-red-500">Sign out of your account</p>
              </div>
            </button>
          </div>
        </div>
      <% } %>
    </div>
  </div>

  <!-- Scripts -->
  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
  <script src="/js/datetime-formatter.js"></script>
  <script src="/js/map.js"></script>
  <script src="/js/trip-view-utils.js"></script>
  <script src="/js/trip-map.js"></script>
  <script src="/js/sidebar-loader.js"></script>
  <script src="/js/companions-manager.js"></script>
  <script src="/js/trips-list.js"></script>

  <script>
    // Prepare trip data for map
    const allTripsData = {
      flights: [],
      hotels: [],
      transportation: [],
      carRentals: [],
      events: []
    };

    // Prepare data for upcoming trips (flights and events)
    const upcomingTripsData = {
      flights: [],
      hotels: [],
      transportation: [],
      carRentals: [],
      events: []
    };

    // Prepare data for past trips (flights only)
    const pastTripsData = {
      flights: [],
      hotels: [],
      transportation: [],
      carRentals: [],
      events: []
    };

    // Add standalone items to all data and upcoming data
    <% if (typeof standaloneFlights !== 'undefined' && standaloneFlights && standaloneFlights.length > 0) { %>
      allTripsData.flights.push(...<%- JSON.stringify(standaloneFlights) %>);
      upcomingTripsData.flights.push(...<%- JSON.stringify(standaloneFlights) %>);
      pastTripsData.flights.push(...<%- JSON.stringify(standaloneFlights) %>);
    <% } %>
    <% if (typeof standaloneTransportation !== 'undefined' && standaloneTransportation && standaloneTransportation.length > 0) { %>
      allTripsData.transportation.push(...<%- JSON.stringify(standaloneTransportation) %>);
      upcomingTripsData.transportation.push(...<%- JSON.stringify(standaloneTransportation) %>);
    <% } %>
    <% if (typeof standaloneEvents !== 'undefined' && standaloneEvents && standaloneEvents.length > 0) { %>
      allTripsData.events.push(...<%- JSON.stringify(standaloneEvents) %>);
      upcomingTripsData.events.push(...<%- JSON.stringify(standaloneEvents) %>);
    <% } %>

    // Collect all upcoming items for sorting
    const upcomingFlights = [];
    const upcomingEvents = [];
    const upcomingTransportation = [];

    <% upcomingTrips.forEach(trip => { %>
      <% if (trip.flights && trip.flights.length > 0) { %>
        upcomingFlights.push(...<%- JSON.stringify(trip.flights) %>);
      <% } %>
      <% if (trip.transportation && trip.transportation.length > 0) { %>
        upcomingTransportation.push(...<%- JSON.stringify(trip.transportation) %>);
      <% } %>
      <% if (trip.events && trip.events.length > 0) { %>
        upcomingEvents.push(...<%- JSON.stringify(trip.events) %>);
      <% } %>
    <% }) %>

    // Sort upcoming items chronologically and add to data
    upcomingFlights.forEach(f => {
      allTripsData.flights.push(f);
      upcomingTripsData.flights.push(f);
    });
    upcomingEvents.forEach(e => {
      allTripsData.events.push(e);
      upcomingTripsData.events.push(e);
    });
    upcomingTransportation.forEach(t => {
      allTripsData.transportation.push(t);
      upcomingTripsData.transportation.push(t);
    });

    // Collect all past flights for sorting
    const pastFlights = [];

    <% pastTrips.forEach(trip => { %>
      <% if (trip.flights && trip.flights.length > 0) { %>
        pastFlights.push(...<%- JSON.stringify(trip.flights) %>);
      <% } %>
    <% }) %>

    // Sort past flights chronologically and add to data
    pastFlights.sort((a, b) => {
      const timeA = new Date(a.departureDateTime).getTime();
      const timeB = new Date(b.departureDateTime).getTime();
      return timeA - timeB;
    });

    pastFlights.forEach(f => {
      allTripsData.flights.push(f);
      pastTripsData.flights.push(f);
    });
  </script>
  <% } %>

</body>
</html>