<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %></title>
  <!-- Leaflet CSS -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
  <!-- Google Material Symbols -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
  <!-- Tailwind CSS -->
  <link href="https://unpkg.com/tailwindcss@^2.0/dist/tailwind.min.css" rel="stylesheet">
  <!-- Trips List Styles -->
  <link href="/css/trips-list.css" rel="stylesheet">
</head>
<body class="overflow-hidden">
  <!-- Navigation hidden on this full-screen map view -->
  <div class="hide-nav">
    <%- include('../partials/nav') %>
  </div>

  <!-- Full-screen map -->
  <div id="overviewMap"></div>

  <!-- Secondary Sidebar - for dynamic content (Account Settings, Companions, etc.) -->
  <div id="secondary-sidebar" class="secondary-sidebar">
    <div class="p-6">
      <div id="secondary-sidebar-content">
        <!-- Account Settings and Companions content will be loaded here -->
      </div>
      <div id="create-trip-form" style="display: none;">
        <div class="flex items-center justify-between mb-6">
          <h2 class="text-lg font-bold text-gray-900">Create New Trip</h2>
          <button onclick="closeSecondarySidebar()" class="text-gray-400 hover:text-gray-600">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
            </svg>
          </button>
        </div>

      <form action="/trips" method="POST" class="space-y-4">
        <div>
          <label for="name" class="block text-sm font-medium text-gray-700 mb-1">Trip Name *</label>
          <input type="text" id="name" name="name" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="e.g., Tokyo Adventure">
        </div>

        <div class="grid grid-cols-2 gap-4">
          <!-- Departure Date with Preline Advanced Datepicker -->
          <div>
            <label for="departureDate" class="block text-sm font-medium text-gray-700 mb-1">Departure Date *</label>
            <div class="relative">
              <input type="text" id="departureDate" name="departureDate" required
                     class="py-3 px-4 pe-9 block w-full border border-gray-300 rounded-md text-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50 disabled:pointer-events-none"
                     placeholder="Select date" readonly>
              <div class="absolute inset-y-0 right-0 flex items-center pointer-events-none z-20 pr-4">
                <svg class="flex-shrink-0 h-4 w-4 text-gray-500" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                  <line x1="16" y1="2" x2="16" y2="6"></line>
                  <line x1="8" y1="2" x2="8" y2="6"></line>
                  <line x1="3" y1="10" x2="21" y2="10"></line>
                </svg>
              </div>
            </div>
          </div>

          <!-- Return Date with Preline Advanced Datepicker -->
          <div>
            <label for="returnDate" class="block text-sm font-medium text-gray-700 mb-1">Return Date *</label>
            <div class="relative">
              <input type="text" id="returnDate" name="returnDate" required
                     class="py-3 px-4 pe-9 block w-full border border-gray-300 rounded-md text-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50 disabled:pointer-events-none"
                     placeholder="Select date" readonly>
              <div class="absolute inset-y-0 right-0 flex items-center pointer-events-none z-20 pr-4">
                <svg class="flex-shrink-0 h-4 w-4 text-gray-500" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                  <line x1="16" y1="2" x2="16" y2="6"></line>
                  <line x1="8" y1="2" x2="8" y2="6"></line>
                  <line x1="3" y1="10" x2="21" y2="10"></line>
                </svg>
              </div>
            </div>
          </div>
        </div>

        <div>
          <label for="purpose" class="block text-sm font-medium text-gray-700 mb-1">Purpose</label>
          <select id="purpose" name="purpose" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent appearance-none bg-white">
            <option value="">Select purpose...</option>
            <option value="business">Business</option>
            <option value="leisure">Leisure</option>
            <option value="family">Family</option>
            <option value="adventure">Adventure</option>
            <option value="romantic">Romantic</option>
            <option value="other">Other</option>
          </select>
        </div>

        <div>
          <label for="description" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
          <textarea id="description" name="description" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="Brief description of your trip..."></textarea>
        </div>

        <div class="flex space-x-3 pt-4">
          <button type="submit" class="flex-1 bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors">
            Create Trip
          </button>
          <button type="button" onclick="closeSecondarySidebar()" class="px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 transition-colors">
            Cancel
          </button>
        </div>
      </form>
      </div>
    </div>
  </div>

  <!-- Primary Sidebar -->
  <div class="primary-sidebar">
    <!-- Fixed Header -->
    <div class="sidebar-header p-6">
      <!-- Header -->
      <div class="flex items-center justify-between mb-6">
        <div class="flex items-center space-x-3">
          <div class="w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center">
            <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"/>
            </svg>
          </div>
          <h1 class="text-xl font-bold text-gray-900">My Trips</h1>
        </div>
        <div class="flex items-center space-x-2">
          <button
            onclick="showCreateTripForm()"
            class="inline-flex items-center px-3 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
            </svg>
            New Trip
          </button>
        </div>
      </div>

      <!-- Flash messages -->
      <%- include('../partials/flash') %>

      <!-- Tabs for Upcoming/Past/Settings -->
      <div class="border-b border-gray-200 -mx-6">
        <nav class="-mb-px flex px-6">
          <button
            id="upcoming-tab"
            class="py-3 px-4 border-b-2 border-blue-500 font-medium text-sm text-blue-600 bg-blue-50 rounded-t-lg transition-all duration-200"
            onclick="showUpcomingTrips()"
          >
            <div class="flex items-center space-x-2">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
              </svg>
              <span>Upcoming</span>
            </div>
          </button>
          <button
            id="past-tab"
            class="py-3 px-4 border-b-2 border-transparent font-medium text-sm text-gray-500 hover:text-gray-700 hover:bg-gray-50 rounded-t-lg transition-all duration-200"
            onclick="showPastTrips()"
          >
            <div class="flex items-center space-x-2">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
              </svg>
              <span>Past</span>
            </div>
          </button>
          <button
            id="settings-tab"
            class="py-3 px-4 border-b-2 border-transparent font-medium text-sm text-gray-500 hover:text-gray-700 hover:bg-gray-50 rounded-t-lg transition-all duration-200"
            onclick="showSettings()"
          >
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"/>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
            </svg>
          </button>
        </nav>
      </div>
    </div>

    <!-- Scrollable Content -->
    <div class="sidebar-content">

      <!-- No trips state -->
      <% if (trips.length === 0) { %>
        <div class="text-center py-12 px-6">
          <div class="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"/>
            </svg>
          </div>
          <h3 class="text-lg font-medium text-gray-900 mb-2">No trips yet</h3>
          <p class="text-gray-500 mb-6">Get started by creating your first trip</p>
          <a href="/trips/create" class="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
            </svg>
            Create first trip
          </a>
        </div>
      <% } else { %>

      <%
        // Server-side formatting functions (must match datetime-formatter.js)
        function formatDate(date) {
          const d = new Date(date);
          const day = String(d.getDate()).padStart(2, '0');
          const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
          const month = months[d.getMonth()];
          const year = d.getFullYear();
          return `${day} ${month} ${year}`;
        }

        const now = new Date();
        const upcomingTrips = [];
        const pastTrips = [];

        trips.forEach(trip => {
          const returnDate = new Date(trip.returnDate);
          let isPast = returnDate < now;

          if (!isPast && trip.flights && trip.flights.length > 0) {
            const lastFlight = trip.flights.reduce((latest, f) => {
              const arrivalDate = new Date(f.arrivalDateTime);
              return arrivalDate > latest ? arrivalDate : latest;
            }, new Date(0));
            if (lastFlight < now) isPast = true;
          }

          if (!isPast && trip.hotels && trip.hotels.length > 0) {
            const lastHotel = trip.hotels.reduce((latest, h) => {
              const checkoutDate = new Date(h.checkOutDateTime);
              return checkoutDate > latest ? checkoutDate : latest;
            }, new Date(0));
            if (lastHotel < now) isPast = true;
          }

          if (!isPast && trip.transportation && trip.transportation.length > 0) {
            const lastTransport = trip.transportation.reduce((latest, t) => {
              const arrivalDate = new Date(t.arrivalDateTime);
              return arrivalDate > latest ? arrivalDate : latest;
            }, new Date(0));
            if (lastTransport < now) isPast = true;
          }

          if (!isPast && trip.carRentals && trip.carRentals.length > 0) {
            const lastRental = trip.carRentals.reduce((latest, c) => {
              const dropoffDate = new Date(c.dropoffDateTime);
              return dropoffDate > latest ? dropoffDate : latest;
            }, new Date(0));
            if (lastRental < now) isPast = true;
          }

          if (!isPast && trip.events && trip.events.length > 0) {
            const lastEvent = trip.events.reduce((latest, e) => {
              const endDate = new Date(e.endDateTime);
              return endDate > latest ? endDate : latest;
            }, new Date(0));
            if (lastEvent < now) isPast = true;
          }

          if (isPast) {
            pastTrips.push(trip);
          } else {
            upcomingTrips.push(trip);
          }
        });
      %>

      <div class="tab-content">
        <!-- UPCOMING TRIPS TAB -->
        <div class="tab-pane fade show active" id="upcomingTrips">
          <% if (upcomingTrips.length === 0) { %>
            <div class="alert alert-info m-4">
              <i class="bi bi-info-circle"></i> No upcoming trips.
            </div>
          <% } else { %>
            <%
              // Helper function to extract flight number without airline code
              function getFlightNum(flightNumber) {
                const match = flightNumber.match(/(\d+)$/);
                return match ? match[1] : flightNumber;
              }

              // Helper function to extract city name from location string
              function getCityName(location) {
                if (location.includes(' - ')) {
                  const parts = location.split(' - ')[1];
                  if (parts && parts.includes(',')) {
                    return parts.split(',')[0].trim();
                  }
                  return parts;
                }
                return location.split(' - ')[0] || location;
              }

              // First, collect ALL items from all trips (with trip reference) AND standalone items
              const allItemsWithTrip = [];

              // Add standalone items first
              if (typeof standaloneFlights !== 'undefined' && standaloneFlights) {
                standaloneFlights.forEach(f => {
                  const flightNum = getFlightNum(f.flightNumber);
                  const airlineCode = f.flightNumber.replace(/\d+$/, '');
                  const originCity = getCityName(f.origin);
                  const destinationCity = getCityName(f.destination);
                  allItemsWithTrip.push({
                    type: 'flight',
                    time: new Date(f.departureDateTime),
                    data: f,
                    tripId: null,
                    trip: null,
                    display: `<span class="material-symbols-outlined text-blue-600 inline-icon" style="font-size: 16px;">flight</span> ${airlineCode}${flightNum}: ${originCity} → ${destinationCity}`,
                    hasSegment: true,
                    marker: null
                  });
                });
              }

              if (typeof standaloneTransportation !== 'undefined' && standaloneTransportation) {
                standaloneTransportation.forEach(t => {
                  const originCity = getCityName(t.origin);
                  const destinationCity = getCityName(t.destination);
                  allItemsWithTrip.push({
                    type: 'transportation',
                    time: new Date(t.departureDateTime),
                    data: t,
                    tripId: null,
                    trip: null,
                    display: `<span class="material-symbols-outlined text-amber-600 inline-icon" style="font-size: 16px;">train</span> ${t.method}: ${originCity} → ${destinationCity}`,
                    hasSegment: true,
                    marker: null
                  });
                });
              }

              if (typeof standaloneEvents !== 'undefined' && standaloneEvents) {
                standaloneEvents.forEach(e => {
                  allItemsWithTrip.push({
                    type: 'event',
                    time: new Date(e.startDateTime),
                    data: e,
                    tripId: null,
                    trip: null,
                    display: `<span class="material-symbols-outlined text-red-600 inline-icon" style="font-size: 16px;">event</span> ${e.name}`,
                    hasSegment: false,
                    marker: null
                  });
                });
              }

              upcomingTrips.forEach(trip => {
                // Add flights
                if (trip.flights && Array.isArray(trip.flights)) {
                  trip.flights.forEach(f => {
                    const flightNum = getFlightNum(f.flightNumber);
                    const airlineCode = f.flightNumber.replace(/\d+$/, '');
                    const originCity = getCityName(f.origin);
                    const destinationCity = getCityName(f.destination);
                    allItemsWithTrip.push({
                      type: 'flight',
                      time: new Date(f.departureDateTime),
                      data: f,
                      tripId: trip.id,
                      trip: trip,
                      display: `<span class="material-symbols-outlined text-blue-600 inline-icon" style="font-size: 16px;">flight</span> ${airlineCode}${flightNum}: ${originCity} → ${destinationCity}`,
                      hasSegment: true,
                      marker: null
                    });
                  });
                }

                // Add transportation
                if (trip.transportation && Array.isArray(trip.transportation)) {
                  trip.transportation.forEach(t => {
                    const originCity = getCityName(t.origin);
                    const destinationCity = getCityName(t.destination);
                    allItemsWithTrip.push({
                      type: 'transportation',
                      time: new Date(t.departureDateTime),
                      data: t,
                      tripId: trip.id,
                      trip: trip,
                      display: `<span class="material-symbols-outlined text-amber-600 inline-icon" style="font-size: 16px;">train</span> ${t.method}: ${originCity} → ${destinationCity}`,
                      hasSegment: true,
                      marker: null
                    });
                  });
                }

                // Add events
                if (trip.events && Array.isArray(trip.events)) {
                  trip.events.forEach(e => {
                    allItemsWithTrip.push({
                      type: 'event',
                      time: new Date(e.startDateTime),
                      data: e,
                      tripId: trip.id,
                      trip: trip,
                      display: `<span class="material-symbols-outlined text-red-600 inline-icon" style="font-size: 16px;">event</span> ${e.name}`,
                      hasSegment: false,
                      marker: null
                    });
                  });
                }
              });

              // Sort ALL items chronologically
              allItemsWithTrip.sort((a, b) => a.time - b.time);

              // Assign markers in chronological order
              let mapMarkerCounter = 0;
              allItemsWithTrip.forEach(item => {
                if (item.hasSegment) {
                  mapMarkerCounter++;
                  item.marker = mapMarkerCounter;
                }
              });

              // Now group items by trip for display
              const tripItems = [];

              // Add standalone items group if there are any
              const standaloneItems = allItemsWithTrip.filter(item => item.tripId === null);
              if (standaloneItems.length > 0) {
                tripItems.push({
                  trip: null,
                  items: standaloneItems,
                  isStandalone: true
                });
              }

              upcomingTrips.forEach(trip => {
                const items = allItemsWithTrip.filter(item => item.tripId === trip.id);

                // Add trip even if it has no items
                tripItems.push({
                  trip: trip,
                  items: items,
                  isStandalone: false
                });
              });

              // Sort trips by earliest item time (standalone items first if they exist)
              tripItems.sort((a, b) => {
                // Standalone items should come first
                if (a.isStandalone && !b.isStandalone) return -1;
                if (!a.isStandalone && b.isStandalone) return 1;

                const aTime = a.items.length > 0 ? a.items[0].time : (a.trip ? new Date(a.trip.departureDate) : new Date());
                const bTime = b.items.length > 0 ? b.items[0].time : (b.trip ? new Date(b.trip.departureDate) : new Date());
                return aTime - bTime;
              });
            %>

        <!-- Upcoming Trips Content -->
        <div id="upcoming-content" class="space-y-4 p-6">
          <% if (tripItems.length === 0) { %>
            <div class="text-center py-8">
              <p class="text-gray-500">No upcoming trips to display.</p>
            </div>
          <% } else { %>
            <div class="space-y-3">
              <% tripItems.forEach((tripData, tripIndex) => { %>
                <div class="border border-gray-200 rounded-lg bg-white shadow-sm">
                  <!-- Accordion Header -->
                  <button class="w-full py-4 px-5 inline-flex items-center justify-between gap-x-3 font-semibold text-start text-gray-800 hover:bg-gray-50 rounded-lg transition-colors"
                          onclick="toggleAccordion('upcoming-<%= tripIndex %>')">
                    <div class="flex items-center space-x-3">
                      <% if (tripData.isStandalone) { %>
                        <div class="w-8 h-8 bg-gray-100 rounded-lg flex items-center justify-center">
                          <svg class="w-4 h-4 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                          </svg>
                        </div>
                        <div>
                          <h3 class="text-sm font-medium text-gray-900">Standalone Events</h3>
                          <p class="text-xs text-gray-500">Not attached to any trip</p>
                        </div>
                      <% } else { %>
                        <%
                          // Determine icon based on trip purpose
                          let tripIcon = 'flight'; // default
                          let iconClass = 'text-blue-600';
                          let bgClass = 'bg-blue-100';

                          if (tripData.trip.purpose === 'business') {
                            tripIcon = 'badge';
                            iconClass = 'text-purple-600';
                            bgClass = 'bg-purple-100';
                          } else if (tripData.trip.purpose === 'leisure' || tripData.trip.purpose === 'family' || tripData.trip.purpose === 'romantic') {
                            tripIcon = 'hotel';
                            iconClass = 'text-green-600';
                            bgClass = 'bg-green-100';
                          }
                        %>
                        <div class="w-8 h-8 <%= bgClass %> rounded-lg flex items-center justify-center">
                          <span class="material-symbols-outlined <%= iconClass %>" style="font-size: 16px;"><%= tripIcon %></span>
                        </div>
                        <div onclick="window.location.href='/trips/<%= tripData.trip.id %>'; event.stopPropagation();" style="cursor: pointer;" class="flex-1 text-left">
                          <h3 class="text-sm font-medium text-gray-900 hover:text-blue-600"><%= tripData.trip.name %></h3>
                          <p class="text-xs text-gray-500"><%= formatDate(tripData.trip.departureDate) %> - <%= formatDate(tripData.trip.returnDate) %></p>
                        </div>
                      <% } %>
                    </div>
                    <svg class="accordion-arrow w-4 h-4 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m6 9 6 6 6-6"/>
                    </svg>
                  </button>

                  <!-- Accordion Content -->
                  <div id="upcoming-<%= tripIndex %>" class="accordion-content hidden">
                    <div class="pb-4 px-5">
                      <% if (tripData.items.length === 0 && !tripData.isStandalone) { %>
                        <div class="text-center py-4">
                          <p class="text-sm text-gray-500 italic">No activities added yet. Click trip name to add details.</p>
                        </div>
                      <% } else { %>
                        <div class="space-y-2">
                          <% tripData.items.forEach((item, itemIndex) => {
                            const hours = String(item.time.getHours()).padStart(2, '0');
                            const minutes = String(item.time.getMinutes()).padStart(2, '0');
                            const typeClass = `marker-${item.type}`;
                          %>
                            <div class="trip-item flex items-start space-x-3 p-3 rounded-lg border border-gray-100 hover:border-gray-200 transition-colors cursor-pointer"
                                 data-trip-id="<%= tripData.tripId || '' %>"
                                 data-item-type="<%= item.type %>"
                                 data-marker="<%= item.marker || '' %>"
                                 onmouseover="highlightMapMarker('<%= item.marker || '' %>', '<%= item.type %>')"
                                 onmouseout="unhighlightMapMarker('<%= item.marker || '' %>')"
                                 <% if (!tripData.isStandalone) { %>
                                   onclick="window.location.href='/trips/<%= tripData.trip.id %>'"
                                 <% } %>>
                              <% if (item.marker) { %>
                                <div class="timeline-marker <%= typeClass %> mt-1 flex-shrink-0"><%= item.marker %></div>
                              <% } %>
                              <div class="flex-1 min-w-0">
                                <div class="flex items-center space-x-2 mb-1">
                                  <span class="text-xs font-medium text-gray-900"><%= formatDate(item.time) %> <%= hours %>:<%= minutes %></span>
                                </div>
                                <p class="text-sm text-gray-600"><%- item.display %></p>
                              </div>
                            </div>
                          <% }) %>
                        </div>
                      <% } %>
                    </div>
                  </div>
                </div>
              <% }) %>
            </div>
          <% } %>
        </div>

        <!-- Past Trips Content -->
        <div id="past-content" class="space-y-4 p-6 hidden">
          <% if (pastTrips.length === 0) { %>
            <div class="text-center py-8">
              <p class="text-gray-500">No past trips to display.</p>
            </div>
          <% } else { %>
            <div class="grid grid-cols-1 gap-4">
              <% pastTrips.forEach((trip, index) => { %>
                <div class="bg-white rounded-lg border border-gray-200 shadow-sm opacity-75 hover:opacity-100 transition-opacity">
                  <div class="p-4">
                    <div class="flex items-center space-x-3 mb-3">
                      <div class="w-8 h-8 bg-gray-100 rounded-lg flex items-center justify-center">
                        <svg class="w-4 h-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                        </svg>
                      </div>
                      <div onclick="window.location.href='/trips/<%= trip.id %>'" style="cursor: pointer;" class="flex-1">
                        <h3 class="text-sm font-medium text-gray-700 hover:text-gray-900"><%= trip.name %></h3>
                        <p class="text-xs text-gray-500"><%= formatDate(trip.departureDate) %> - <%= formatDate(trip.returnDate) %></p>
                      </div>
                    </div>

                    <!-- Trip Stats -->
                    <div class="flex flex-wrap gap-2">
                      <span class="inline-flex items-center px-2 py-1 text-xs bg-gray-100 text-gray-600 rounded-md">
                        <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"/>
                        </svg>
                        <%= trip.flights ? trip.flights.length : 0 %> flights
                      </span>
                      <span class="inline-flex items-center px-2 py-1 text-xs bg-gray-100 text-gray-600 rounded-md">
                        <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"/>
                        </svg>
                        <%= trip.hotels ? trip.hotels.length : 0 %> hotels
                      </span>
                      <span class="inline-flex items-center px-2 py-1 text-xs bg-gray-100 text-gray-600 rounded-md">
                        <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                        </svg>
                        <%= trip.events ? trip.events.length : 0 %> events
                      </span>
                    </div>
                  </div>
                </div>
              <% }) %>
            </div>
          <% } %>
        </div>

        <!-- Settings Content -->
        <div id="settings-content" class="space-y-4 p-6 hidden">
          <div class="space-y-3">
            <button onclick="loadSidebarContent('/account/sidebar')" class="w-full flex items-center space-x-3 p-4 rounded-lg border border-gray-200 hover:border-gray-300 hover:bg-gray-50 transition-colors">
              <div class="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
                <svg class="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                </svg>
              </div>
              <div class="flex-1 text-left">
                <h3 class="text-sm font-medium text-gray-900">Account Settings</h3>
                <p class="text-xs text-gray-500">Manage your profile and preferences</p>
              </div>
              <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
              </svg>
            </button>

            <button onclick="loadSidebarContent('/companions/sidebar')" class="w-full flex items-center space-x-3 p-4 rounded-lg border border-gray-200 hover:border-gray-300 hover:bg-gray-50 transition-colors">
              <div class="w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center">
                <svg class="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"/>
                </svg>
              </div>
              <div class="flex-1 text-left">
                <h3 class="text-sm font-medium text-gray-900">Travel Companions</h3>
                <p class="text-xs text-gray-500">Manage your travel companions</p>
              </div>
              <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
              </svg>
            </button>

            <button onclick="confirmLogout()" class="w-full flex items-center space-x-3 p-4 rounded-lg border border-gray-200 hover:border-red-300 hover:bg-red-50 transition-colors">
              <div class="w-8 h-8 bg-red-100 rounded-lg flex items-center justify-center">
                <svg class="w-4 h-4 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"/>
                </svg>
              </div>
              <div class="flex-1 text-left">
                <h3 class="text-sm font-medium text-red-600">Sign Out</h3>
                <p class="text-xs text-red-500">Sign out of your account</p>
              </div>
            </button>
          </div>
        </div>
      <% } %>
    </div>
  </div> 

  <!-- Scripts -->
  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
  <script src="/js/datetime-formatter.js"></script>
  <script src="/js/map.js"></script>
  <script src="/js/trip-view-utils.js"></script>
  <script src="/js/trip-map.js"></script>
  <script src="/js/datepicker-advanced.js"></script>
  <script src="/js/sidebar-loader.js"></script>
  <script src="/js/companions-manager.js"></script>
  <script src="/js/trips-list.js"></script>

  <script>
    // Prepare trip data for map
    const allTripsData = {
      flights: [],
      hotels: [],
      transportation: [],
      carRentals: [],
      events: []
    };

    // Add standalone items
    <% if (typeof standaloneFlights !== 'undefined' && standaloneFlights && standaloneFlights.length > 0) { %>
      allTripsData.flights.push(...<%- JSON.stringify(standaloneFlights) %>);
    <% } %>
    <% if (typeof standaloneTransportation !== 'undefined' && standaloneTransportation && standaloneTransportation.length > 0) { %>
      allTripsData.transportation.push(...<%- JSON.stringify(standaloneTransportation) %>);
    <% } %>
    <% if (typeof standaloneEvents !== 'undefined' && standaloneEvents && standaloneEvents.length > 0) { %>
      allTripsData.events.push(...<%- JSON.stringify(standaloneEvents) %>);
    <% } %>

    // Add trip items
    <% upcomingTrips.forEach(trip => { %>
      <% if (trip.flights && trip.flights.length > 0) { %>
        allTripsData.flights.push(...<%- JSON.stringify(trip.flights) %>);
      <% } %>
      <% if (trip.transportation && trip.transportation.length > 0) { %>
        allTripsData.transportation.push(...<%- JSON.stringify(trip.transportation) %>);
      <% } %>
      <% if (trip.events && trip.events.length > 0) { %>
        allTripsData.events.push(...<%- JSON.stringify(trip.events) %>);
      <% } %>
    <% }) %>
  </script>
  <% } %>

</body>
</html>
