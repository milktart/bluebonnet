<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%- title %></title>
  <!-- Leaflet CSS -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
  <!-- Google Material Symbols -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
  <!-- Tailwind CSS -->
  <link href="https://unpkg.com/tailwindcss@^2.0/dist/tailwind.min.css" rel="stylesheet">
  <!-- Trip View Styles -->
  <link href="/css/trip-view.css" rel="stylesheet">
</head>
<body class="overflow-hidden">
  <!-- Navigation hidden on this full-screen map view -->
  <div class="hide-nav">
    <%- include('../partials/nav') %>
  </div>

  <!-- Full-screen map -->
  <div id="tripMap"></div>

  <!-- Secondary Sidebar - for editing forms -->
  <div id="secondary-sidebar" class="secondary-sidebar">
    <div class="p-6">
      <div id="secondary-sidebar-content">
        <!-- Dynamic edit content will be inserted here -->
      </div>
    </div>
  </div>

  <!-- Primary Sidebar -->
  <div class="primary-sidebar">
    <!-- Fixed Header -->
    <div class="sidebar-header p-6">
      <!-- Header -->
      <div class="flex items-center justify-between mb-6">
        <div class="flex items-center">
          <a href="/trips" class="flex items-center justify-center w-8 h-8 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-lg transition-colors mr-0">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
            </svg>
          </a>
          <%
            // Server-side formatting functions (must match datetime-formatter.js)
            function formatDate(date) {
              const d = new Date(date);
              const day = String(d.getDate()).padStart(2, '0');
              const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
              const month = months[d.getMonth()];
              const year = d.getFullYear();
              return `${day} ${month} ${year}`;
            }

            // Determine icon based on trip purpose
            let tripIcon = 'flights_and_hotels'; // default
            let iconClass = 'text-blue-600';
            let bgClass = 'bg-blue-100';

            if (trip.purpose === 'business') {
              tripIcon = 'badge';
              iconClass = 'text-purple-600';
              bgClass = 'bg-purple-100';
            } else if (trip.purpose === 'leisure' || trip.purpose === 'family' || trip.purpose === 'romantic') {
              tripIcon = 'hotel';
              iconClass = 'text-green-600';
              bgClass = 'bg-green-100';
            }
          %>
          <div class="w-8 h-8 <%= bgClass %> rounded-lg flex items-center justify-center mr-3 ml-0 mr-1">
            <span class="material-symbols-outlined <%= iconClass %>" style="font-size: 16px;"><%= tripIcon %></span>
          </div>
          <div>
            <h1 class="text-xl font-bold text-gray-900"><%- trip.name %></h1>
            <p class="text-xs text-gray-500"><%- formatDate(trip.departureDate) %> - <%- formatDate(trip.returnDate) %></p>
          </div>
        </div>
        <div class="flex items-center space-x-2">
          <% if (isOwner) { %>
            <button onclick="loadSidebarContent('/trips/<%- trip.id %>/edit/sidebar')" class="inline-flex items-center px-2 py-1 text-xs font-medium text-blue-600 bg-blue-50 border border-blue-200 rounded-md shadow-sm hover:bg-blue-100">
              <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
              </svg>
              Edit
            </button>
          <% } %>
        </div>
      </div>

      <!-- Flash messages -->
      <% if (typeof success_msg !== 'undefined' && success_msg && success_msg.length > 0) { %>
        <div class="mb-4 p-3 bg-green-50 border border-green-200 rounded-md text-green-800 text-sm">
          <%= success_msg %>
        </div>
      <% } %>
      <% if (typeof error_msg !== 'undefined' && error_msg && error_msg.length > 0) { %>
        <div class="mb-4 p-3 bg-red-50 border border-red-200 rounded-md text-red-800 text-sm">
          <%= error_msg %>
        </div>
      <% } %>
      <% if (typeof error !== 'undefined' && error && error.length > 0) { %>
        <div class="mb-4 p-3 bg-red-50 border border-red-200 rounded-md text-red-800 text-sm">
          <%= error %>
        </div>
      <% } %>

      <!-- Add buttons for new items -->
      <div class="mb-6">
        <button onclick="showAddItemMenu()" class="w-full py-3 px-4 inline-flex items-center justify-center gap-x-2 text-sm font-medium rounded-lg border border-transparent bg-blue-600 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
          </svg>
          Add Item
        </button>
      </div>
    </div>

    <!-- Scrollable Content -->
    <div class="sidebar-content">
      <%- include('../partials/trip-sidebar-content') %>
    </div>
  </div>
  <!-- Scripts -->
  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
  <script src="/js/datetime-formatter.js"></script>
  <script src="/js/map.js"></script>
  <script src="/js/trip-view-utils.js"></script>
  <script src="/js/trip-map.js"></script>
  <script src="/js/preline.js"></script>
  <script src="/js/main.js"></script>
  <!-- Trip View Scripts -->
  <script src="/js/trip-view-map.js"></script>
  <script src="/js/trip-view-sidebar.js"></script>
  <script src="/js/sidebar-loader.js"></script>
  <script src="/js/async-form-handler.js"></script>
  <script src="/js/trip-view-utils.js"></script>
  <script src="/js/companion-selector.js"></script>

  <script>
    // Trip data for map
    // Make trip ID available globally for sidebar form loading
    const tripId = '<%- trip.id %>';

    const tripData = {
      id: tripId,
      departureDate: '<%- trip.departureDate %>',
      returnDate: '<%- trip.returnDate %>',
      flights: <%- JSON.stringify(trip.flights) %>,
      hotels: <%- JSON.stringify(trip.hotels) %>,
      transportation: <%- JSON.stringify(trip.transportation) %>,
      carRentals: <%- JSON.stringify(trip.carRentals) %>,
      events: <%- JSON.stringify(trip.events) %>
    };

    // Airline data for flight lookup
    const airlineData = <%- JSON.stringify(airlines) %>;

    // Initialize map and hover effects
    let mapInitialized = false;
    let currentMap = null;
    const activeAnimations = {};


    // Initialize when DOM is ready
    document.addEventListener('DOMContentLoaded', function() {
      console.log('Trip data:', tripData);

      if (typeof L === 'undefined') {
        console.error('Leaflet not loaded');
        const mapEl = document.getElementById('tripMap');
        if (mapEl) {
          mapEl.innerHTML = '<div class="bg-red-50 border border-red-200 rounded-md p-4 text-red-700">Map library not loaded. Please refresh the page.</div>';
        }
        return;
      }

      // Initialize map immediately
      setTimeout(() => {
        if (!mapInitialized) {
          initOverviewMap(tripData, 'tripMap')
            .then((map) => {
              mapInitialized = true;
              currentMap = map;
              setupTimelineHoverEffects(map);
              console.log('Map initialized successfully');

              // Map sizing is now handled by trip-map.js
            })
            .catch(error => {
              console.error('Map initialization error:', error);
              const mapEl = document.getElementById('tripMap');
              if (mapEl) {
                mapEl.innerHTML = '<div class="bg-yellow-50 border border-yellow-200 rounded-md p-4 text-yellow-700">Map failed to load: ' + error.message + '</div>';
              }
            });
        }
      }, 500);
    });

    // Show add item menu
    function showAddItemMenu() {
      const container = document.getElementById('secondary-sidebar-content');
      const content = `
        <div class="space-y-3">
          <button onclick="showAddForm('flight')" class="w-full flex items-center space-x-3 p-4 rounded-lg border border-gray-200 hover:border-gray-300 hover:bg-gray-50 transition-colors">
            <div class="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
              <span class="material-symbols-outlined text-blue-600" style="font-size: 16px;">flight</span>
            </div>
            <div class="flex-1 text-left">
              <h3 class="text-sm font-medium text-gray-900">Add Flight</h3>
              <p class="text-xs text-gray-500">Add a flight to your trip</p>
            </div>
            <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
            </svg>
          </button>

          <button onclick="showAddForm('hotel')" class="w-full flex items-center space-x-3 p-4 rounded-lg border border-gray-200 hover:border-gray-300 hover:bg-gray-50 transition-colors">
            <div class="w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center">
              <span class="material-symbols-outlined text-green-600" style="font-size: 16px;">hotel</span>
            </div>
            <div class="flex-1 text-left">
              <h3 class="text-sm font-medium text-gray-900">Add Hotel</h3>
              <p class="text-xs text-gray-500">Add accommodation to your trip</p>
            </div>
            <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
            </svg>
          </button>

          <button onclick="showAddForm('transportation')" class="w-full flex items-center space-x-3 p-4 rounded-lg border border-gray-200 hover:border-gray-300 hover:bg-gray-50 transition-colors">
            <div class="w-8 h-8 bg-amber-100 rounded-lg flex items-center justify-center">
              <span class="material-symbols-outlined text-amber-600" style="font-size: 16px;">train</span>
            </div>
            <div class="flex-1 text-left">
              <h3 class="text-sm font-medium text-gray-900">Add Transportation</h3>
              <p class="text-xs text-gray-500">Add train, bus, or other transport</p>
            </div>
            <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
            </svg>
          </button>

          <button onclick="showAddForm('carRental')" class="w-full flex items-center space-x-3 p-4 rounded-lg border border-gray-200 hover:border-gray-300 hover:bg-gray-50 transition-colors">
            <div class="w-8 h-8 bg-gray-100 rounded-lg flex items-center justify-center">
              <span class="material-symbols-outlined text-gray-600" style="font-size: 16px;">directions_car</span>
            </div>
            <div class="flex-1 text-left">
              <h3 class="text-sm font-medium text-gray-900">Add Car Rental</h3>
              <p class="text-xs text-gray-500">Add rental car details</p>
            </div>
            <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
            </svg>
          </button>

          <button onclick="showAddForm('event')" class="w-full flex items-center space-x-3 p-4 rounded-lg border border-gray-200 hover:border-gray-300 hover:bg-gray-50 transition-colors">
            <div class="w-8 h-8 bg-red-100 rounded-lg flex items-center justify-center">
              <span class="material-symbols-outlined text-red-600" style="font-size: 16px;">event</span>
            </div>
            <div class="flex-1 text-left">
              <h3 class="text-sm font-medium text-gray-900">Add Event</h3>
              <p class="text-xs text-gray-500">Add activity or event</p>
            </div>
            <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
            </svg>
          </button>
        </div>
      `;

      if (container) container.innerHTML = content;
      openSecondarySidebar();
    }






    // Toggle event time fields visibility
    function toggleEventTimesVisibility(formType, isAllDay) {
      const timeFields = document.querySelectorAll(`.event-time-field-${formType}`);
      timeFields.forEach(field => {
        field.style.display = isAllDay ? 'none' : 'block';
      });
    }

    // Helper function to combine date and time inputs into ISO datetime string
    document.addEventListener('submit', function(e) {
      if (e.target.tagName === 'FORM') {
        const form = e.target;

        // Check if this is an all-day event
        const allDayCheckbox = form.querySelector('[id$="AllDay"]');
        const isAllDayEvent = allDayCheckbox && allDayCheckbox.checked;

        // Handle various datetime field combinations
        const dateTimeFields = [
          {date: 'departureDate', time: 'departureTime', combined: 'departureDateTime'},
          {date: 'arrivalDate', time: 'arrivalTime', combined: 'arrivalDateTime'},
          {date: 'checkInDate', time: 'checkInTime', combined: 'checkInDateTime'},
          {date: 'checkOutDate', time: 'checkOutTime', combined: 'checkOutDateTime'},
          {date: 'pickupDate', time: 'pickupTime', combined: 'pickupDateTime'},
          {date: 'dropoffDate', time: 'dropoffTime', combined: 'dropoffDateTime'},
          {date: 'startDate', time: 'startTime', combined: 'startDateTime'},
          {date: 'endDate', time: 'endTime', combined: 'endDateTime'}
        ];

        dateTimeFields.forEach(field => {
          const dateInput = form.querySelector(`[name="${field.date}"]`);
          const timeInput = form.querySelector(`[name="${field.time}"]`);

          if (dateInput && timeInput && dateInput.value) {
            // Remove any existing hidden input with this name to prevent duplicates
            const existingHidden = form.querySelector(`input[type="hidden"][name="${field.combined}"]`);
            if (existingHidden) {
              existingHidden.remove();
            }

            // For all-day events, only use the date (set time to midnight)
            if (isAllDayEvent && (field.combined === 'startDateTime' || field.combined === 'endDateTime')) {
              // Create hidden input for combined datetime with midnight time
              const hiddenInput = document.createElement('input');
              hiddenInput.type = 'hidden';
              hiddenInput.name = field.combined;
              hiddenInput.value = `${dateInput.value}T00:00:00.000Z`;
              form.appendChild(hiddenInput);
            } else if (!isAllDayEvent && timeInput.value) {
              // Regular datetime with time specified
              const hiddenInput = document.createElement('input');
              hiddenInput.type = 'hidden';
              hiddenInput.name = field.combined;
              hiddenInput.value = `${dateInput.value}T${timeInput.value}:00.000Z`;
              form.appendChild(hiddenInput);
            }
          }
        });
      }
    });


    // Airport search functionality
    const airportsData = {
      "AUS": {"airport_name": "Austin-Bergstrom International", "city_name": "Austin", "country_name": "United States"},
      "JFK": {"airport_name": "John F Kennedy International", "city_name": "New York", "country_name": "United States"},
      "LAX": {"airport_name": "Los Angeles International", "city_name": "Los Angeles", "country_name": "United States"},
      "LHR": {"airport_name": "Heathrow", "city_name": "London", "country_name": "United Kingdom"},
      "CDG": {"airport_name": "Charles de Gaulle", "city_name": "Paris", "country_name": "France"},
      "FRA": {"airport_name": "Frankfurt", "city_name": "Frankfurt", "country_name": "Germany"},
      "NRT": {"airport_name": "Narita International", "city_name": "Tokyo", "country_name": "Japan"},
      "HND": {"airport_name": "Tokyo Haneda", "city_name": "Tokyo", "country_name": "Japan"},
      "DXB": {"airport_name": "Dubai International", "city_name": "Dubai", "country_name": "United Arab Emirates"},
      "SIN": {"airport_name": "Singapore Changi", "city_name": "Singapore", "country_name": "Singapore"},
      "HKG": {"airport_name": "Hong Kong International", "city_name": "Hong Kong", "country_name": "Hong Kong SAR"},
      "ICN": {"airport_name": "Incheon International", "city_name": "Seoul", "country_name": "South Korea"},
      "PEK": {"airport_name": "Beijing Capital International", "city_name": "Beijing", "country_name": "China"},
      "PVG": {"airport_name": "Shanghai Pudong International", "city_name": "Shanghai", "country_name": "China"},
      "SYD": {"airport_name": "Kingsford Smith", "city_name": "Sydney", "country_name": "Australia"},
      "MEL": {"airport_name": "Melbourne", "city_name": "Melbourne", "country_name": "Australia"},
      "YYZ": {"airport_name": "Toronto Pearson International", "city_name": "Toronto", "country_name": "Canada"},
      "YVR": {"airport_name": "Vancouver International", "city_name": "Vancouver", "country_name": "Canada"},
      "ORD": {"airport_name": "O'Hare International", "city_name": "Chicago", "country_name": "United States"},
      "ATL": {"airport_name": "Hartsfield-Jackson Atlanta International", "city_name": "Atlanta", "country_name": "United States"},
      "DFW": {"airport_name": "Dallas/Fort Worth International", "city_name": "Dallas", "country_name": "United States"},
      "DEN": {"airport_name": "Denver International", "city_name": "Denver", "country_name": "United States"},
      "LAS": {"airport_name": "McCarran International", "city_name": "Las Vegas", "country_name": "United States"},
      "SEA": {"airport_name": "Seattle-Tacoma International", "city_name": "Seattle", "country_name": "United States"},
      "SFO": {"airport_name": "San Francisco International", "city_name": "San Francisco", "country_name": "United States"},
      "MIA": {"airport_name": "Miami International", "city_name": "Miami", "country_name": "United States"},
      "BOS": {"airport_name": "Logan International", "city_name": "Boston", "country_name": "United States"},
      "EWR": {"airport_name": "Newark Liberty International", "city_name": "Newark", "country_name": "United States"},
      "LGA": {"airport_name": "LaGuardia", "city_name": "New York", "country_name": "United States"},
      "IAD": {"airport_name": "Washington Dulles International", "city_name": "Washington", "country_name": "United States"},
      "DCA": {"airport_name": "Ronald Reagan Washington National", "city_name": "Washington", "country_name": "United States"},
      "PHL": {"airport_name": "Philadelphia International", "city_name": "Philadelphia", "country_name": "United States"},
      "CLT": {"airport_name": "Charlotte Douglas International", "city_name": "Charlotte", "country_name": "United States"},
      "PHX": {"airport_name": "Phoenix Sky Harbor International", "city_name": "Phoenix", "country_name": "United States"},
      "IAH": {"airport_name": "George Bush Intercontinental", "city_name": "Houston", "country_name": "United States"},
      "MSP": {"airport_name": "Minneapolis-St Paul International", "city_name": "Minneapolis", "country_name": "United States"},
      "DTW": {"airport_name": "Detroit Metropolitan Wayne County", "city_name": "Detroit", "country_name": "United States"},
      "BWI": {"airport_name": "Baltimore/Washington International", "city_name": "Baltimore", "country_name": "United States"},
      "SLC": {"airport_name": "Salt Lake City International", "city_name": "Salt Lake City", "country_name": "United States"},
      "MDW": {"airport_name": "Midway International", "city_name": "Chicago", "country_name": "United States"},
      "HOU": {"airport_name": "William P Hobby", "city_name": "Houston", "country_name": "United States"},
      "OAK": {"airport_name": "Oakland International", "city_name": "Oakland", "country_name": "United States"},
      "SJC": {"airport_name": "Norman Y. Mineta San Jose International", "city_name": "San Jose", "country_name": "United States"},
      "BUR": {"airport_name": "Hollywood Burbank", "city_name": "Burbank", "country_name": "United States"},
      "LGB": {"airport_name": "Long Beach", "city_name": "Long Beach", "country_name": "United States"},
      "SNA": {"airport_name": "John Wayne", "city_name": "Orange County", "country_name": "United States"},
      "RDU": {"airport_name": "Raleigh-Durham International", "city_name": "Raleigh", "country_name": "United States"},
      "MCI": {"airport_name": "Kansas City International", "city_name": "Kansas City", "country_name": "United States"},
      "IND": {"airport_name": "Indianapolis International", "city_name": "Indianapolis", "country_name": "United States"},
      "CLE": {"airport_name": "Cleveland Hopkins International", "city_name": "Cleveland", "country_name": "United States"},
      "STL": {"airport_name": "Lambert-St. Louis International", "city_name": "St. Louis", "country_name": "United States"},
      "TPA": {"airport_name": "Tampa International", "city_name": "Tampa", "country_name": "United States"},
      "MCO": {"airport_name": "Orlando International", "city_name": "Orlando", "country_name": "United States"},
      "FLL": {"airport_name": "Fort Lauderdale-Hollywood International", "city_name": "Fort Lauderdale", "country_name": "United States"},
      "PBI": {"airport_name": "Palm Beach International", "city_name": "West Palm Beach", "country_name": "United States"},
      "JAX": {"airport_name": "Jacksonville International", "city_name": "Jacksonville", "country_name": "United States"},
      "MKE": {"airport_name": "Milwaukee Mitchell International", "city_name": "Milwaukee", "country_name": "United States"},
      "CHS": {"airport_name": "Charleston International", "city_name": "Charleston", "country_name": "United States"},
      "SAV": {"airport_name": "Savannah/Hilton Head International", "city_name": "Savannah", "country_name": "United States"},
      "BNA": {"airport_name": "Nashville International", "city_name": "Nashville", "country_name": "United States"},
      "MEM": {"airport_name": "Memphis International", "city_name": "Memphis", "country_name": "United States"},
      "MSY": {"airport_name": "Louis Armstrong New Orleans International", "city_name": "New Orleans", "country_name": "United States"},
      "SAT": {"airport_name": "San Antonio International", "city_name": "San Antonio", "country_name": "United States"},
      "OKC": {"airport_name": "Will Rogers World", "city_name": "Oklahoma City", "country_name": "United States"},
      "TUL": {"airport_name": "Tulsa International", "city_name": "Tulsa", "country_name": "United States"},
      "LIT": {"airport_name": "Bill and Hillary Clinton National", "city_name": "Little Rock", "country_name": "United States"},
      "XNA": {"airport_name": "Northwest Arkansas Regional", "city_name": "Fayetteville", "country_name": "United States"},
      "ABQ": {"airport_name": "Albuquerque International Sunport", "city_name": "Albuquerque", "country_name": "United States"},
      "ELP": {"airport_name": "El Paso International", "city_name": "El Paso", "country_name": "United States"},
      "ANC": {"airport_name": "Ted Stevens Anchorage International", "city_name": "Anchorage", "country_name": "United States"},
      "HNL": {"airport_name": "Daniel K. Inouye International", "city_name": "Honolulu", "country_name": "United States"},
      "PDX": {"airport_name": "Portland International", "city_name": "Portland", "country_name": "United States"},
      "BOI": {"airport_name": "Boise Airport", "city_name": "Boise", "country_name": "United States"},
      "BIL": {"airport_name": "Billings Logan International", "city_name": "Billings", "country_name": "United States"}
    };

    // Flight date initialization and auto-update functions
    function initializeFlightDates(tripStartDate) {
      // Set departure and arrival dates to trip start date after form is rendered
      setTimeout(() => {
        const departureInput = document.getElementById('flightDepartureDate');
        const arrivalInput = document.getElementById('flightArrivalDate');

        if (departureInput && arrivalInput && !departureInput.value) {
          departureInput.value = tripStartDate;
          arrivalInput.value = tripStartDate;
        }
      }, 100);
    }

    function updateFlightArrivalDate() {
      const departureInput = document.getElementById('flightDepartureDate');
      const arrivalInput = document.getElementById('flightArrivalDate');

      if (departureInput && arrivalInput && departureInput.value) {
        // Update arrival date to match departure date
        arrivalInput.value = departureInput.value;
      }
    }

    function updateEditFlightArrivalDate() {
      const departureInput = document.getElementById('editFlightDepartureDate');
      const arrivalInput = document.getElementById('editFlightArrivalDate');

      if (departureInput && arrivalInput && departureInput.value) {
        // Update arrival date to match departure date
        arrivalInput.value = departureInput.value;
      }
    }

    // Hotel date auto-update functions
    function updateHotelCheckOutDate() {
      const checkInInput = document.getElementById('hotelCheckInDate');
      const checkOutInput = document.getElementById('hotelCheckOutDate');

      if (checkInInput && checkOutInput && checkInInput.value) {
        // Calculate checkout date as one day after check-in
        const checkInDate = new Date(checkInInput.value);
        checkInDate.setDate(checkInDate.getDate() + 1);

        // Format as YYYY-MM-DD for the date input
        const year = checkInDate.getFullYear();
        const month = String(checkInDate.getMonth() + 1).padStart(2, '0');
        const day = String(checkInDate.getDate()).padStart(2, '0');
        checkOutInput.value = `${year}-${month}-${day}`;
      }
    }

    function updateEditHotelCheckOutDate() {
      const checkInInput = document.getElementById('editHotelCheckInDate');
      const checkOutInput = document.getElementById('editHotelCheckOutDate');

      if (checkInInput && checkOutInput && checkInInput.value) {
        // Calculate checkout date as one day after check-in
        const checkInDate = new Date(checkInInput.value);
        checkInDate.setDate(checkInDate.getDate() + 1);

        // Format as YYYY-MM-DD for the date input
        const year = checkInDate.getFullYear();
        const month = String(checkInDate.getMonth() + 1).padStart(2, '0');
        const day = String(checkInDate.getDate()).padStart(2, '0');
        checkOutInput.value = `${year}-${month}-${day}`;
      }
    }

    // Car rental date auto-update functions
    function updateRentalDropoffDate() {
      const pickupInput = document.getElementById('rentalPickupDate');
      const dropoffInput = document.getElementById('rentalDropoffDate');

      if (pickupInput && dropoffInput && pickupInput.value) {
        // Calculate dropoff date as one day after pickup
        const pickupDate = new Date(pickupInput.value);
        pickupDate.setDate(pickupDate.getDate() + 1);

        // Format as YYYY-MM-DD for the date input
        const year = pickupDate.getFullYear();
        const month = String(pickupDate.getMonth() + 1).padStart(2, '0');
        const day = String(pickupDate.getDate()).padStart(2, '0');
        dropoffInput.value = `${year}-${month}-${day}`;
      }
    }

    function updateAddRentalDropoffDate() {
      const pickupInput = document.getElementById('addRentalPickupDate');
      const dropoffInput = document.getElementById('addRentalDropoffDate');

      if (pickupInput && dropoffInput && pickupInput.value) {
        // Calculate dropoff date as one day after pickup
        const pickupDate = new Date(pickupInput.value);
        pickupDate.setDate(pickupDate.getDate() + 1);

        // Format as YYYY-MM-DD for the date input
        const year = pickupDate.getFullYear();
        const month = String(pickupDate.getMonth() + 1).padStart(2, '0');
        const day = String(pickupDate.getDate()).padStart(2, '0');
        dropoffInput.value = `${year}-${month}-${day}`;
      }
    }

    // NOTE: showAddForm is now defined in trip-view-sidebar.js
    // This function has been moved there to handle AJAX form loading

  </script>

</body>
</html>
